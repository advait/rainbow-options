{"version":3,"sources":["portfolio.ts","blackscholes.js","contours.js","option-leg-card.tsx","left-drawer.tsx","graphql.tsx","select-leg-modal.tsx","App.js","index.js"],"names":["PutCall","moment","require","portfolio","legs","quantity","putCall","CALL","k","t","add","iv","entryTime","getEarliestExpiration","arr","map","l","sort","a","b","isBefore","portfolioEntryCost","entryStockPrice","r","blackscholes","normalCdf","x","Math","abs","probability","exp","euroCall","s","sigma","max","d1","log","pow","sqrt","d2","euroPut","gpu","GPU","legGrossValueAtPoint","leg","legT","diff","PUT","Error","portfolioGrossValuePoint","_","sum","value","portfolioValue","widthPx","heightPx","t0","tFinal","y0","yFinal","performance","mark","x0","xFinal","entryCost","kernel","createKernel","serializedPortfolio","y","floor","this","thread","price","legsLength","totalValue","i","type","summedResults","setOutput","render","ret","push","length","forEach","serializePortfolio","destroy","minValue","Infinity","pctGain","v","measure","addFunction","contoursStyles","makeStyles","theme","outerContainer","width","height","toolbar","mixins","contoursInnerContainer","position","d3Container","zIndex","svg","Contours","props","classes","className","Toolbar","id","GainsTooltip","st","D3Contours","d3ContainerRef","React","createRef","state","timeWindow","e","show","node","target","parentElement","bounds","getBoundingClientRect","clientX","left","clientY","top","tScale","invert","yScale","setST","mouseX","mouseY","initD3","updateD3","resizeListener","window","addEventListener","removeEventListener","nextProps","nextState","nextContext","JSON","stringify","ref","onMouseMove","updateST","onMouseOut","container","current","console","assert","offsetWidth","offsetHeight","d3","attr","domain","range","yAxis","scale","valueOf","tAxis","append","call","appendChild","clearMarks","clearMeasures","contourWidth","contourHeight","computedPortfolioValue","contours","size","getEntriesByType","contourPath","projection","point","stream","select","selectAll","data","join","d","Component","style","display","hidden","backgroundColor","padding","borderRadius","transform","toFixed","optionLegStyles","card","marginLeft","spacing","marginRight","marginTop","marginBottom","overflow","cardHeader","cursor","expand","transition","transitions","create","duration","shortest","expandOpen","contentRow","alignItems","justifyContent","bottomMargin","largeButtonGroup","flexGrow","flexShrink","largeButton","paddingLeft","paddingRight","smallButtonGroup","smallButton","margin","minWidth","descriptionValueParent","flexDirection","description","fontSize","color","grey","marginTOp","orangeLong","palette","getContrastText","deepOrange","orangeShort","purpleLong","deepPurple","purpleShort","OptionLegCard","useState","expanded","setExpanded","cond","test","und","other","undefined","quantityStr","q","putCallStr","pc","longShortStr","avatarStr","strikeStr","exprStr","format","callButtonClass","putButtonClass","setExpiration","delta","setLeg","clone","setQuantity","newQuantity","setStrike","setPutCall","setIV","Card","elevation","CardHeader","avatar","Tooltip","title","Avatar","clsx","subheader","action","IconButton","onClick","Collapse","in","timeout","Divider","Box","ButtonGroup","orientation","variant","Button","edge","deleteLeg","Fragment","portfolioSummaryStyles","paddingTop","flexBasis","descriptionValueParentShrink","textCenter","textAlign","PortfolioSummary","chain","drawerStyles","drawer","overflowX","drawerPaper","drawerTypography","drawerTypographySmall","addIconButton","alignSelf","LeftDrawer","legIndex","newPortfolio","cloneDeep","filter","setPortfolio","Drawer","paper","anchor","Grid","item","xs","TextField","label","fullWidth","symbol","onChange","setSymbol","setEntryStockPrice","parseFloat","Typography","newLeg","startIcon","noValidate","autoComplete","setR","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","legOverviewBox","expiration","strike","gql","orange","purple","borderBottomColor","useStyles","root","appBar","titleLink","menuButton","content","right","overflowY","App","tree","Portfolio","mouseST","setMouseST","entryValue","endingValue","netValue","portfolioNetValuePoint","AppBar","Icon","Link","href","underline","aria-label","aria-controls","aria-haspopup","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7ac9b93e.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport {Moment} from \"moment\";\nimport * as blackscholes from \"./blackscholes\";\n\nconst moment = require(\"moment\");\n\n/**\n * Represents an options portfolio consisting of multiple legs.\n */\nexport type Portfolio = {\n  legs: Leg[],\n  entryTime: Moment,\n}\n\n/**\n * Represents a single leg/option within an options portfolio.\n */\nexport type Leg = {\n  quantity: number,\n  putCall: PutCall,\n  k: number,\n  t: Moment,\n  iv: number,\n}\n\nexport enum PutCall {\n  PUT,\n  CALL,\n}\n\n/**\n * @type Portfolio\n */\nexport const portfolio: Portfolio = {\n  legs: [\n    {quantity: 1, putCall: PutCall.CALL, k: 7, t: moment().add(182, 'days'), iv: 1.2},\n  ],\n  entryTime: moment(),\n};\n\n/**\n * Returns the expiration date of the earliest-expiring option in the portfolio.\n */\nexport function getEarliestExpiration(portfolio: Portfolio): Moment {\n  const arr = portfolio.legs.map(l => l.t);\n  arr.sort((a, b) => a.isBefore(b) ? -1 : 1);\n  return arr[0];\n}\n\nexport function legToString(leg: Leg): string {\n  return `${leg.quantity} ${leg.putCall} ${leg.k} ${leg.t}`;\n}\n\nexport function portfolioEntryCost(entryStockPrice: number, portfolio: Portfolio, r: number): number {\n  return blackscholes.portfolioGrossValuePoint(entryStockPrice, portfolio.entryTime, portfolio, r);\n}\n\n/**\n * Returns the overall portfolio IV as a weighted average of each leg's IV where the weight is the absolute value of\n * the quantity.\n * @param portfolio\n */\nexport function weightedIV(portfolio: Portfolio): number {\n  const sum = _.chain(portfolio.legs)\n      .map(l => Math.abs(l.quantity) * l.iv)\n      .sum()\n      .value();\n  const totalLegs = _.chain(portfolio.legs)\n      .map(l => Math.abs(l.quantity))\n      .sum()\n      .value();\n  return sum / totalLegs;\n}\n","import {GPU} from \"gpu.js\";\nimport {PutCall, portfolioEntryCost} from \"./portfolio\";\nimport moment from \"moment\";\nimport * as _ from \"lodash\";\n\n/**\n * The CDF of the normal distribution with mean = 0 and stdev = 1.\n * @param x {number} the value to look up.\n * @returns {number} the CDF value.\n */\nexport function normalCdf(x) {\n  // HASTINGS.  MAX ERROR = .000001\n  const t = 1 / (1 + .2316419 * Math.abs(x));\n  const d = .3989423 * Math.exp(-x * x / 2);\n  const probability = d * t * (.3193815 + t * (-.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));\n  if (x > 0) {\n    return 1 - probability;\n  } else {\n    return probability;\n  }\n}\n\n/**\n * Returns the value of a European call option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroCall(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, s - k);\n  } else if (t < 0) {\n    return 0;\n  }\n  const d1 = (Math.log(s / k) + (r + Math.pow(sigma, 2) / 2.) * t) / (sigma * Math.sqrt(t));\n  const d2 = d1 - (sigma * Math.sqrt(t));\n  return (s * normalCdf(d1) - k * Math.exp(-r * t) * normalCdf(d2));\n}\n\n/**\n * Returns the value of a European put option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroPut(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, k - s);\n  } else if (t < 0) {\n    return 0;\n  }\n  const d1 = (Math.log(s / k) + (r + Math.pow(sigma, 2) / 2.) * t) / (sigma * Math.sqrt(t));\n  const d2 = d1 - (sigma * Math.sqrt(t));\n  return (k * Math.exp(-r * t) * normalCdf(-d2) - s * normalCdf(-d1));\n}\n\nconst gpu = new GPU();\ngpu.addFunction(normalCdf);\ngpu.addFunction(euroCall);\ngpu.addFunction(euroPut);\n\n/**\n * Returns the entry cost of a single leg (ignoring quantity) at the given stock price and time.\n * @param s {number} Stock price\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param leg {Leg} the leg to measure\n * @param r {number} risk free rate\n * @returns {number} gross value of the portfolio\n */\nexport function legGrossValueAtPoint(s, t, leg, r) {\n  if (leg.putCall === PutCall.CALL) {\n    const legT = leg.t.diff(t, 'years', true);\n    return euroCall(s, leg.k, legT, r, leg.iv);\n  } else if (leg.putCall === PutCall.PUT) {\n    const legT = leg.t.diff(t, 'years', true);\n    return euroPut(s, leg.k, legT, r, leg.iv);\n  } else {\n    throw Error(\"Invalid type: \" + leg.putCall);\n  }\n}\n\n/**\n * Returns the total value of the portfolio at a given stock price and time.\n * @param s {number} Stock price\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param portfolio {Portfolio} the portfolio to measure\n * @param r {number} risk free rate\n * @returns {number} gross value of the portfolio\n */\nexport function portfolioGrossValuePoint(s, t, portfolio, r) {\n  return _.chain(portfolio.legs)\n      .map((leg) => leg.quantity * legGrossValueAtPoint(s, t, leg, r))\n      .sum()\n      .value();\n}\n\n/**\n * Returns the value of the portfolio at a given stock price and time.\n * @param entryStockPrice {number} The stock price when the portfolio was purchased\n * @param s {number} The stock price that we are using to lookup the portfolio value\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param portfolio {Portfolio} the portfolio to measure\n * @param r {number} risk free rate\n * @returns {{endingValue: number, netValue: number, pctGain, number}} value of the portfolio\n */\nexport function portfolioNetValuePoint(entryStockPrice, s, t, portfolio, r) {\n  const entryValue = portfolioGrossValuePoint(entryStockPrice, portfolio.entryTime, portfolio, r);\n  const endingValue = portfolioGrossValuePoint(s, t, portfolio, r);\n\n  const netValue = endingValue - entryValue;\n  const pctGain = netValue / entryValue;\n  return {\n    endingValue,\n    netValue,\n    pctGain,\n  };\n}\n\n/**\n * Serializes a portfolio into an array that can be read by the GPU.\n * @param portfolio {Portfolio}\n * @param portfolioEntryCost {number}\n * @returns number[]\n */\nfunction serializePortfolio(portfolio, portfolioEntryCost) {\n  const ret = [];\n  // First push portfolio metadata\n  ret.push(portfolioEntryCost);\n  ret.push(portfolio.legs.length);\n  // Next push each leg data sequentially\n  portfolio.legs.forEach(leg => {\n    ret.push(leg.quantity);\n    ret.push(leg.putCall === PutCall.PUT ? 0 : 1);\n    ret.push(leg.k);\n    ret.push(leg.t.diff(portfolio.entryTime, \"years\", true));\n    ret.push(leg.iv);\n  });\n  return ret;\n}\n\n/**\n * @param widthPx {number}\n * @param heightPx {number}\n * @param t0 {number}\n * @param tFinal {number}\n * @param y0 {number}\n * @param yFinal {number}\n * @param entryStockPrice {number}\n * @param portfolio {Portfolio}\n * @param r {number}\n * @returns {{minValue: number, pctGain: number[]}}\n */\nexport function portfolioValue(widthPx, heightPx, t0, tFinal, y0, yFinal, entryStockPrice, portfolio, r) {\n  performance.mark(\"portfolioValueStart\");\n\n  // Switch from moment dates to number dates in terms of fractions of years\n  const x0 = t0.diff(portfolio.entryTime, 'years', true);\n  const xFinal = tFinal.diff(portfolio.entryTime, 'years', true);\n\n  const entryCost = portfolioEntryCost(entryStockPrice, portfolio, r);\n\n  // Compute the net value (value - entry cost) for the whole options portfolio on the gpu\n  performance.mark(\"gpuLegStart\");\n  let kernel = gpu.createKernel(function (widthPx, heightPx, x0, xFinal, y0, yFinal, serializedPortfolio, r) {\n    const y = Math.floor(this.thread.x / widthPx);\n    const x = this.thread.x % widthPx;\n    let t0 = x / widthPx * (xFinal - x0) + x0;\n    let price = y / heightPx * (yFinal - y0) + y0;\n    const entryCost = serializedPortfolio[0];\n    const legsLength = serializedPortfolio[1];\n    const metadataPerLeg = 5;\n    let totalValue = 0;\n    for (let i = 0; i < legsLength; i++) {\n      const quantity = serializedPortfolio[i * metadataPerLeg + 2];\n      const type = serializedPortfolio[i * metadataPerLeg + 3];\n      const k = serializedPortfolio[i * metadataPerLeg + 4];\n      const legT = serializedPortfolio[i * metadataPerLeg + 5];\n      const iv = serializedPortfolio[i * metadataPerLeg + 6];\n      if (type === 0) {\n        totalValue += quantity * euroPut(price, k, legT - t0, r, iv);\n      } else {\n        totalValue += quantity * euroCall(price, k, legT - t0, r, iv);\n      }\n    }\n    return totalValue - entryCost;\n  });\n  let render = kernel.setOutput([widthPx * heightPx]);\n  const serializedPortfolio = serializePortfolio(portfolio, entryCost);\n  const summedResults = render(widthPx, heightPx, x0, xFinal, y0, yFinal, serializedPortfolio, r);\n  kernel.destroy();\n\n  // Compute min value so we can normalize based on pct gain\n  let minValue = Infinity;\n  for (let i = 0; i < summedResults.length; i++) {\n    const value = summedResults[i];\n    if (value < minValue) {\n      minValue = value;\n    }\n  }\n  const pctGain = summedResults.map(v => v / (-minValue)); // -1 to +Inf\n  performance.measure(\"portfolioValue\", \"portfolioValueStart\");\n\n  return {\n    pctGain,\n    minValue\n  };\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport {portfolioValue} from \"./blackscholes\";\nimport moment from \"moment\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport * as _ from \"lodash\";\n\n\nconst contoursStyles = makeStyles(theme => ({\n  outerContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  toolbar: theme.mixins.toolbar,\n  contoursInnerContainer: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  d3Container: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n  },\n  svg: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  }\n}));\n\nexport function Contours(props) {\n  const classes = contoursStyles();\n  return (\n      <div className={classes.outerContainer}>\n        <Toolbar className={classes.toolbar}/>\n        <div id=\"contoursInnerContainer\" className={classes.contoursInnerContainer}>\n          <D3Contours {...props} className={classes.d3Container}/>\n          <GainsTooltip\n              st={props.st}\n              pctGain={props.portfolioValue.pctGain}\n              className={classes.svg}\n          />\n        </div>\n      </div>\n  )\n}\n\nclass D3Contours extends React.Component {\n  constructor(props) {\n    super(props);\n    this.d3ContainerRef = React.createRef();\n    const ySpread = 3;\n    this.state = {\n      y0: this.props.entryStockPrice * ySpread,\n      yFinal: this.props.entryStockPrice / ySpread,\n    };\n\n    this.timeWindow = this.props.timeWindow;\n    this.entryStockPrice = this.props.entryStockPrice;\n    this.portfolio = this.props.portfolio;\n    this.r = this.props.r;\n  }\n\n  /**\n   * Handle a mouse move/out event, update the S and T positions based on the coordinates of the mouse.\n   * @param e {MouseEvent}\n   * @param show {boolean} whether to show the gains tooltip (is the mouse over the contour graph?)\n   */\n  updateST(e, show) {\n    let node = e.target;\n    while (node.id !== \"contoursInnerContainer\") {\n      node = node.parentElement;\n      if (!node) {\n        throw new Error(\"Could not find contoursInnerContainer\");\n      }\n    }\n    const bounds = node.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const t = this.tScale.invert(x);\n    const s = this.yScale.invert(y);\n    this.props.setST({s, t: moment(t), mouseX: e.clientX, mouseY: e.clientY, show});\n  }\n\n  componentDidMount() {\n    this.initD3();\n    this.updateD3();\n\n    this.resizeListener = _.debounce(() => this.updateD3(), 10);\n    window.addEventListener(\"resize\", this.resizeListener);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeListener);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    // Major hacks to get d3 to play nicely with react's lifecycle\n    // Here, we only want to update D3 if any portfolio/options-related props have changed\n    if (this.timeWindow.t0 !== nextProps.timeWindow.t0 ||\n        this.timeWindow.tFinal !== nextProps.timeWindow.tFinal ||\n        this.entryStockPrice !== nextProps.entryStockPrice ||\n        JSON.stringify(this.props.portfolio) !== JSON.stringify(nextProps.portfolio) ||\n        this.r !== nextProps.r) {\n\n      // Now that we've confirmed that the props have changed, we need to manually overwrite them\n      this.timeWindow.t0 = nextProps.timeWindow.t0;\n      this.timeWindow.tFinal = nextProps.timeWindow.tFinal;\n      this.entryStockPrice = nextProps.entryStockPrice;\n      this.portfolio = nextProps.portfolio;\n      this.r = nextProps.r;\n\n      this.updateD3();\n    }\n\n    // Always prevent react from re-rendering our DOM as d3 is responsible for managing it.\n    return false;\n  }\n\n  render() {\n    return (\n        <div ref={this.d3ContainerRef}\n             onMouseMove={e => this.updateST(e, true)}\n             onMouseOut={e => this.updateST(e, false)}\n             className={this.props.className}\n        />\n    );\n  }\n\n  initD3() {\n    const container = this.d3ContainerRef.current;\n    console.assert(container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100.;\n    const height = container.offsetHeight || 100.;\n\n    this.svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [0, 0, width, height]);\n\n    this.yScale = this.yScale = d3.scaleLinear()\n        .domain([this.state.y0, this.state.yFinal])\n        .range([0, height]);\n\n    this.yAxis = d3.axisRight().scale(this.yScale);\n\n    this.tScale = this.tScale = d3.scaleUtc()\n        .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n        .range([0, width]);\n\n    this.tAxis = d3.axisBottom().scale(this.tScale);\n\n    this.svg.append(\"g\")\n        .attr(\"class\", \"contours\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-opacity\", 0.5);\n\n    this.svg.append(\"g\")\n        .attr(\"class\", \"t-axis\")\n        .attr(\"transform\", `translate(0,${this.yScale(556)})`)\n        .call(this.tAxis);\n    this.svg.append(\"g\")\n        .attr(\"class\", \"y-axis\")\n        .call(this.yAxis);\n\n    container.appendChild(this.svg.node());\n  }\n\n  updateD3() {\n    performance.clearMarks();\n    performance.clearMeasures();\n\n    const container = this.d3ContainerRef.current;\n    console.assert(container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100.;\n    const height = container.offsetHeight || 100.;\n\n    this.yScale\n        .domain([this.state.y0, this.state.yFinal])\n        .range([0, height]);\n\n    this.tScale\n        .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n        .range([0, width]);\n\n    // Rather than compute the price for every pixel (resource intensive), we first scale down\n    // and then scale up the d3 contour projection below.\n    const scaleDownFactor = 4;\n    const contourWidth = Math.floor(width / scaleDownFactor);\n    const contourHeight = Math.floor(height / scaleDownFactor);\n    const computedPortfolioValue = portfolioValue(\n        contourWidth,\n        contourHeight,\n        this.timeWindow.t0,\n        this.timeWindow.tFinal,\n        this.state.y0,\n        this.state.yFinal,\n        this.entryStockPrice,\n        this.portfolio,\n        this.r);\n\n    performance.mark(\"d3ContoursStart\");\n    const contours = d3.contours()\n        .size([contourWidth, contourHeight])\n        (computedPortfolioValue.pctGain);\n    performance.mark(\"d3ContoursEnd\");\n    performance.measure(\"d3Contours\", \"d3ContoursStart\", \"d3ContoursEnd\");\n    console.log(performance.getEntriesByType(\"measure\"));\n\n    const contourPath = d3.geoPath().projection(d3.geoTransform({\n      point: function (x, y) {\n        this.stream.point(x / contourWidth * width, y / contourWidth * width)\n      }\n    }));\n\n    // Contour thresholds (pct gains) and the corresponding colors\n    const interpolatePctGain = (pctGain) => {\n      if (pctGain <= 0) {\n        return d3.scaleLinear().domain([-1, 0]).range([0, 0.5])(pctGain);\n      } else {\n        return d3.scalePow().domain([0, 3]).range([0.5, 1])(pctGain);\n      }\n    };\n\n    this.svg.attr(\"viewBox\", [0, 0, width, height]);\n\n    this.svg.select(\".contours\")\n        .selectAll(\"path\")\n        .data(contours)\n        .join(\"path\")\n        .attr(\"fill\", d => d3.interpolateSpectral(interpolatePctGain(d.value)))\n        .attr(\"d\", contourPath);\n\n\n    this.svg.select(\".t-axis\")\n        .attr(\"transform\", `translate(0,${this.yScale(this.entryStockPrice)})`)\n        .call(this.tAxis);\n\n    this.svg.select(\".y-axis\")\n        .call(this.yAxis);\n  }\n}\n\n\nfunction GainsTooltip(props) {\n  const display = props.hidden ? \"hidden\" : \"inline\";\n  const style = {\n    display,\n    position: 'fixed',\n    top: props.st.mouseY + 20,\n    left: props.st.mouseX,\n    zIndex: 3,\n    backgroundColor: '#33333344',\n    padding: '6px',\n    borderRadius: '4px',\n    transform: 'translate(-40%, -200%)',\n  };\n\n  const returns = (pctGain) => {\n    if (pctGain <= 0) {\n      return `${(pctGain * 100).toFixed(2)}%`;\n    } else if (pctGain < 1) {\n      return `+${(pctGain * 100).toFixed(2)}%`;\n    } else {\n      return `${(pctGain).toFixed(2)}x`;\n    }\n  };\n\n  return (\n      <div className=\"gains-tooltip\" style={style}>\n        {returns(props.pctGain)}\n      </div>\n  );\n}\n","import {Avatar, Box, Button, ButtonGroup, Card, CardHeader, Collapse, Theme, Tooltip} from \"@material-ui/core\";\nimport {deepOrange, deepPurple, grey} from \"@material-ui/core/colors\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport clsx from 'clsx';\nimport moment from \"moment\";\nimport React, {useState} from \"react\";\nimport {legGrossValueAtPoint} from \"./blackscholes\";\nimport {Leg, Portfolio, portfolioEntryCost, PutCall, weightedIV} from \"./portfolio\";\n\n\nexport type OptionLegCardProps = {\n  entryStockPrice: number,\n  entryTime: moment.Moment,\n  r: number,\n  leg: Leg,\n  setLeg: (leg: Leg) => void,\n  deleteLeg: () => void,\n}\n\n// @ts-ignore\nconst optionLegStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  largeButtonGroup: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  largeButton: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  smallButtonGroup: {\n    marginRight: theme.spacing(2),\n  },\n  smallButton: {\n    padding: 0,\n    margin: 0,\n    minWidth: \"24px\",\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"column\",\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTOp: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {\n    fontSize: \"18px\",\n  },\n  orangeLong: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  orangeShort: {\n    color: theme.palette.getContrastText(deepOrange[100]),\n    backgroundColor: deepOrange[100],\n  },\n  purpleLong: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n  purpleShort: {\n    color: theme.palette.getContrastText(deepPurple[100]),\n    backgroundColor: deepPurple[100],\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[500]),\n    backgroundColor: grey[500],\n  },\n}));\n\nexport function OptionLegCard(props: OptionLegCardProps) {\n  const classes = optionLegStyles();\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpanded = () => setExpanded(!expanded);\n\n  function cond<T>(test: T | undefined, und: string, other: (t: T) => string): string {\n    if (test === undefined) {\n      return und;\n    } else {\n      return other(test);\n    }\n  }\n\n  const quantityStr = cond(props.leg.quantity, \"-\", q => q > 0 ? `+${q}` : `${q}`);\n  const putCallStr = cond(props.leg.putCall, \"?\", pc => pc === PutCall.CALL ? \"Call\" : \"Put\");\n  const longShortStr = cond(props.leg.quantity, \"Long\", q => q < 0 ? \"Short\" : \"Long\");\n  const avatarStr = `${putCallStr[0]}${longShortStr[0]}`;\n  const strikeStr = cond(props.leg.k, \"?\", k => `$${k}`);\n  const exprStr = cond(props.leg.t, \"?\", t => `${t.format(\"MMM DD, YYYY\")} (${t.diff(moment(), \"days\")} days)`);\n  let callButtonClass = \"\";\n  if (props.leg.putCall === PutCall.CALL) {\n    callButtonClass = (props.leg.quantity && props.leg.quantity < 0) ? classes.orangeShort : classes.orangeLong;\n  }\n  let putButtonClass = \"\";\n  if (props.leg.putCall === PutCall.PUT) {\n    putButtonClass = (props.leg.quantity && props.leg.quantity < 0) ? classes.purpleShort : classes.purpleLong;\n  }\n\n  const setExpiration = (delta: moment.Duration) => () => {\n    props.setLeg({...props.leg, t: props.leg.t.clone().add(delta)});\n  };\n  const setQuantity = (delta: number) => () => {\n    let newQuantity = props.leg.quantity + delta;\n    if (newQuantity === 0) {\n      newQuantity += delta;\n    }\n    props.setLeg({...props.leg, quantity: newQuantity});\n  };\n  const setStrike = (delta: number) => () => {\n    // TODO(advait): Read the next k from the option chain instead of incrementing\n    props.setLeg({...props.leg, k: props.leg.k + delta});\n  };\n  const setPutCall = (putCall: PutCall) => () => {\n    props.setLeg({...props.leg, putCall});\n  };\n  const setIV = (delta: number) => () => {\n    props.setLeg({...props.leg, iv: props.leg.iv + delta});\n  };\n\n  return (\n      <Card elevation={1} className={classes.card}>\n        <CardHeader\n            avatar={\n              <Tooltip title={`${longShortStr} ${putCallStr}`}>\n                <Avatar className={clsx(putButtonClass, callButtonClass)}>{avatarStr}</Avatar>\n              </Tooltip>\n            }\n            title={`${quantityStr}x @ ${strikeStr} ${putCallStr}`}\n            subheader={`${exprStr}`}\n            action={<IconButton className={clsx(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}><ExpandMoreIcon/></IconButton>}\n            onClick={toggleExpanded}\n            className={classes.cardHeader}\n        />\n\n        <Collapse in={expanded} timeout=\"auto\">\n          <Divider className={classes.bottomMargin}/>\n          <Box flexDirection=\"row\" className={classes.contentRow}>\n            <ButtonGroup orientation=\"horizontal\" variant=\"outlined\" className={classes.largeButtonGroup}>\n              <Button\n                  className={clsx(classes.largeButton, callButtonClass)}\n                  onClick={setPutCall(PutCall.CALL)}>\n                {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"} Call\n              </Button>\n              <Button\n                  className={clsx(classes.largeButton, putButtonClass)}\n                  onClick={setPutCall(PutCall.PUT)}>\n                {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"} Put\n              </Button>\n            </ButtonGroup>\n            <IconButton edge=\"end\"><DeleteIcon onClick={props.deleteLeg}/></IconButton>\n          </Box>\n\n          <Box flexDirection=\"row\" className={classes.contentRow}>\n            <ButtonGroup orientation=\"vertical\" variant=\"outlined\" className={classes.smallButtonGroup}>\n              <Button size=\"small\" className={classes.smallButton} onClick={setExpiration(moment.duration(1, \"month\"))}>+</Button>\n              <Button size=\"small\" className={classes.smallButton} onClick={setExpiration(moment.duration(-1, \"month\"))}>-</Button>\n            </ButtonGroup>\n            <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>\n              Expiration\n            </span>\n              <span className={classes.value}>\n                {props.leg.t\n                    ?\n                    <React.Fragment>{props.leg.t.format(\"MMM DD, YY\")} ({props.leg.t.diff(moment(), \"days\")} days)</React.Fragment>\n                    : \"Unknown\"\n                }\n              </span>\n            </div>\n            <IconButton edge=\"end\"><EditIcon/></IconButton>\n          </Box>\n\n          <Box flexDirection=\"row\" className={classes.contentRow}>\n            <ButtonGroup orientation=\"vertical\" variant=\"outlined\" className={classes.smallButtonGroup}>\n              <Button size=\"small\" className={classes.smallButton} onClick={setQuantity(1)}>+</Button>\n              <Button size=\"small\" className={classes.smallButton} onClick={setQuantity(-1)}>-</Button>\n            </ButtonGroup>\n            <div className={classes.descriptionValueParent} style={{width: \"65px\"}}>\n              <span className={classes.description}>\n                Quantity\n              </span>\n              <span className={classes.value}>\n              {props.leg.quantity ? props.leg.quantity : \"?\"}\n              </span>\n            </div>\n            <ButtonGroup orientation=\"vertical\" variant=\"outlined\" className={classes.smallButtonGroup}>\n              <Button size=\"small\" className={classes.smallButton} onClick={setStrike(1)}>+</Button>\n              <Button size=\"small\" className={classes.smallButton} onClick={setStrike(-1)}>-</Button>\n            </ButtonGroup>\n            <div className={classes.descriptionValueParent}>\n              <span className={classes.description}>\n                Strike Price\n              </span>\n              <span className={classes.value}>\n                ${props.leg.k ? props.leg.k.toFixed(2) : \"?\"}\n              </span>\n            </div>\n            <IconButton edge=\"end\"><EditIcon/></IconButton>\n          </Box>\n\n          <Box flexDirection=\"row\" className={classes.contentRow}>\n            <ButtonGroup orientation=\"vertical\" variant=\"outlined\" className={classes.smallButtonGroup}>\n              <Button size=\"small\" className={classes.smallButton} onClick={setIV(.05)}>+</Button>\n              <Button size=\"small\" className={classes.smallButton} onClick={setIV(-.05)}>-</Button>\n            </ButtonGroup>\n            <div className={classes.descriptionValueParent} style={{width: \"60px\"}}>\n              <span className={classes.description}>\n                Unit Price\n              </span>\n              <span className={classes.value}>\n                ${legGrossValueAtPoint(props.entryStockPrice, props.entryTime, props.leg, props.r).toFixed(2)}\n              </span>\n            </div>\n            <div className={classes.descriptionValueParent}>\n              <span className={classes.description}>\n                Implied Volatility\n              </span>\n              <span className={classes.value}>\n                {props.leg.iv ? props.leg.iv.toFixed(2) : \"?\"}\n              </span>\n            </div>\n            <IconButton edge=\"end\"><EditIcon/></IconButton>\n          </Box>\n        </Collapse>\n      </Card>\n  )\n}\n\nexport interface PortfolioSummaryProps {\n  entryStockPrice: number,\n  r: number,\n  portfolio: Portfolio,\n}\n\n// @ts-ignore\nconst portfolioSummaryStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    paddingTop: theme.spacing(2),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n  },\n  descriptionValueParentShrink: {\n    display: \"flex\",\n    flexShrink: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n    \"& :last-child\": {\n      fontSize: \"0.875rem\",\n    }\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTop: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {\n  },\n  textCenter: {\n    textAlign: \"center\",\n  }\n}));\n\nexport function PortfolioSummary(props: PortfolioSummaryProps) {\n  const classes = portfolioSummaryStyles();\n\n  return (\n      <Card className={classes.card}>\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>\n              Net Price\n            </span>\n            <span className={classes.value}>\n              ${portfolioEntryCost(props.entryStockPrice, props.portfolio, props.r).toFixed(2)}\n            </span>\n          </div>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>\n              Weighted IV\n            </span>\n            <span className={classes.value}>\n              {weightedIV(props.portfolio).toFixed(2)}\n            </span>\n          </div>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <div className={classes.descriptionValueParent}>\n              <span className={classes.description}>\n                Max Gain\n              </span>\n            <span className={classes.value}>\n                38.39 (32x)\n              </span>\n          </div>\n          <div className={classes.descriptionValueParent}>\n              <span className={classes.description}>\n                Max Loss\n              </span>\n            <span className={classes.value}>\n                -$1.39 (-100%)\n              </span>\n          </div>\n        </Box>\n\n        <Divider className={classes.bottomMargin}/>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <Tooltip title=\"Delta - how much the option value changes for every dollar increase in stock price\">\n            <div className={classes.descriptionValueParentShrink}>\n              <span className={clsx(classes.description, classes.textCenter)}>&#x394;</span>\n              <span className={classes.value}>\n                0.13\n            </span>\n            </div>\n          </Tooltip>\n          <Tooltip\n              title=\"Delta% - how much the option value changes (as a % of max loss) for every dollar increase in stock price\">\n            <div className={classes.descriptionValueParentShrink}>\n              <span className={clsx(classes.description, classes.textCenter)}>&#x394;%</span>\n              <span className={classes.value}>\n                0.13\n            </span>\n            </div>\n          </Tooltip>\n          <Tooltip\n              title=\"Gamma - how much Delta changes for every dollar increase in stock price\">\n            <div className={classes.descriptionValueParentShrink}>\n              <span className={clsx(classes.description, classes.textCenter)}>&#x194;</span>\n              <span className={classes.value}>\n                0.13\n            </span>\n            </div>\n          </Tooltip>\n          <Tooltip\n              title=\"Gamma% - how much Delta% changes for every dollar increase in stock price\">\n            <div className={classes.descriptionValueParentShrink}>\n            <span className={classes.description}>\n                \t&#x194;%\n            </span>\n              <span className={classes.value}>\n                22%\n              </span>\n            </div>\n          </Tooltip>\n          <Tooltip\n              title=\"Theta - how much the option value changes every day due to time decay\">\n            <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x3F4;\n            </span>\n              <span className={classes.value}>\n                -3.3\n            </span>\n            </div>\n          </Tooltip>\n          <Tooltip\n              title=\"Theta% - how much the option value changes (as a % of max loss) every day due to time decay\">\n            <div className={classes.descriptionValueParentShrink}>\n              <span className={clsx(classes.description, classes.textCenter)}>\n                  &#x3F4;%\n              </span>\n              <span className={classes.value}>\n                -4.3%\n            </span>\n            </div>\n          </Tooltip>\n        </Box>\n      </Card>\n  )\n}\n","import {Button, Drawer, Theme} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from '@material-ui/icons/Add';\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport {OptionLegCard, PortfolioSummary} from \"./option-leg-card\";\nimport {Leg, Portfolio} from \"./portfolio\";\n\nexport const drawerWidth = 350;\n\n// @ts-ignore\nconst drawerStyles = makeStyles((theme: Theme) => ({\n  toolbar: theme.mixins.toolbar,\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    overflowX: \"hidden\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    overflowX: \"hidden\",\n  },\n  drawerTypography: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  drawerTypographySmall: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  addIconButton: {\n    alignSelf: \"flex-end\",\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport type LeftDrawerProps = {\n  symbol: string,\n  setSymbol: (symbol: string) => void,\n  entryStockPrice: number,\n  setEntryStockPrice: (s: number) => void,\n  entryTime: moment.Moment,\n  r: number,\n  setR: (r: number) => void,\n  portfolio: Portfolio,\n  setPortfolio: (p: Portfolio) => void,\n}\n\nexport function LeftDrawer(props: LeftDrawerProps) {\n  const classes = drawerStyles();\n\n  const setLeg = (legIndex: number) => (newLeg: Leg) => {\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs[legIndex] = newLeg;\n    props.setPortfolio(newPortfolio);\n  };\n  const deleteLeg = (legIndex: number) => () => {\n    if (props.portfolio.legs.length === 1) {\n      return;\n    }\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs = newPortfolio.legs.filter((_, i) => i !== legIndex);\n    props.setPortfolio(newPortfolio);\n  };\n  const addLeg = () => {\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs.push({...newPortfolio.legs[newPortfolio.legs.length - 1]});\n    props.setPortfolio(newPortfolio);\n  };\n\n  return (\n      <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          anchor=\"left\"\n      >\n        <div className={classes.toolbar}/>\n\n        <Grid container className={classes.drawerTypography} spacing={2}>\n          <Grid item xs={6}>\n            <TextField\n                label={\"Stock Ticker\"} fullWidth variant=\"outlined\"\n                value={props.symbol}\n                onChange={(e) => props.setSymbol(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n                label=\"Stock Price\" fullWidth variant=\"outlined\"\n                value={props.entryStockPrice.toFixed(2)}\n                type=\"number\"\n                onChange={(e) => props.setEntryStockPrice(parseFloat(e.target.value))}\n            />\n          </Grid>\n        </Grid>\n\n        <Typography className={classes.drawerTypographySmall}/>\n        <Divider/>\n\n        <Typography variant=\"h6\" className={classes.drawerTypography}>Options Legs</Typography>\n        {props.portfolio.legs.map((leg: Leg, i: number) =>\n            <OptionLegCard\n                entryStockPrice={props.entryStockPrice}\n                entryTime={props.entryTime}\n                r={props.r}\n                leg={leg}\n                setLeg={setLeg(i)}\n                deleteLeg={deleteLeg(i)}\n            />)\n        }\n\n        <Button\n            variant=\"text\"\n            startIcon={<AddIcon/>}\n            className={classes.addIconButton}\n            onClick={addLeg}>\n          Add Leg\n        </Button>\n\n        <PortfolioSummary\n            entryStockPrice={props.entryStockPrice}\n            r={props.r}\n            portfolio={props.portfolio}\n        />\n\n        <Typography className={classes.drawerTypographySmall}/>\n        <Divider/>\n\n        <Typography variant=\"h6\" className={classes.drawerTypography}>Variables</Typography>\n        <form className={classes.drawerTypography} noValidate autoComplete=\"off\">\n          <TextField\n              label={\"r (risk-free rate)\"} fullWidth variant=\"outlined\"\n              value={props.r}\n              type=\"number\"\n              onChange={e => props.setR(parseFloat(e.target.value))}\n          />\n        </form>\n      </Drawer>);\n}\n","import {ApolloProvider} from \"@apollo/react-hooks\";\nimport {ApolloClient} from \"apollo-boost\";\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {HttpLink} from \"apollo-link-http\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'http://localhost:4000'\n  }),\n  cache: new InMemoryCache(),\n});\n\nexport function wrapReact(tree: any) {\n  return (\n      <ApolloProvider client={client}>\n        {tree}\n      </ApolloProvider>\n  );\n}\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nexport function deserializeDate(s: string): moment.Moment {\n  // TODO(advait): This should really be handled transparently by Apollo\n  // Consider implementing: https://github.com/eturino/apollo-link-scalars?ts=2\n  return moment(s, DATE_FORMAT);\n}\n\nexport function serializeDate(d: moment.Moment): string {\n  return d.format(DATE_FORMAT);\n}\n","import {useQuery} from \"@apollo/react-hooks\";\nimport {\n  Box,\n  Button,\n  Card,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Theme,\n  Typography\n} from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport {deepOrange, deepPurple, grey} from \"@material-ui/core/colors\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {Alert} from \"@material-ui/lab\";\nimport {gql} from \"apollo-boost\";\nimport * as _ from \"lodash\";\nimport moment from \"moment\";\nimport React, {useState} from 'react';\nimport {deserializeDate} from \"./graphql\";\nimport {Leg, PutCall} from \"./portfolio\";\n\nexport type SelectLegProps = {\n  open: boolean,\n  onClose: () => void,\n  symbol: string,\n  setSymbol: (s: string) => void,\n  currentLeg?: Leg,\n}\n\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n}\n\nexport function SelectLegModal(props: SelectLegProps) {\n  const [tempLeg, rawSetTempLeg] = useState((props.currentLeg || {}) as Partial<Leg>);\n  const setTempLeg = (leg: Partial<Leg>) => {\n    rawSetTempLeg({...tempLeg, ...leg})\n  };\n\n  return (\n      <Dialog\n          open={props.open}\n          onClose={props.onClose}\n          maxWidth=\"md\"\n      >\n        <DialogTitle>Edit Option Leg</DialogTitle>\n\n        <DialogContent>\n          <LegOverview\n              symbol={props.symbol}\n              leg={tempLeg}\n              setTempLeg={setTempLeg}\n          />\n        </DialogContent>\n\n        <DialogContent/>\n        {tempLeg.t\n            ? <OptionChain\n                symbol={props.symbol}\n                expirationDate={tempLeg.t}\n                setTempLeg={leg => setTempLeg({...tempLeg, ...leg})}\n            />\n            : \"\"\n        }\n\n        <DialogContent/>\n        <DialogActions>\n          <Button color=\"secondary\">\n            Cancel\n          </Button>\n          <Button color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\n\nconst legOverviewStyles = makeStyles((theme: Theme) => ({\n  card: {\n    padding: theme.spacing(2),\n    width: \"780px\",\n  },\n  legOverviewBox: {\n    \"& *\": {\n      marginRight: theme.spacing(1),\n    },\n    \"& *:last\": {\n      marginRight: 0,\n    }\n  },\n  putCall: {},\n  expiration: {\n    flexGrow: 1,\n  },\n  quantity: {\n    width: \"100px\",\n  },\n  strike: {\n    width: \"120px\",\n  },\n  iv: {\n    width: \"110px\",\n  },\n  orangeLong: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n    marginRight: theme.spacing(2),\n  },\n  orangeShort: {\n    color: theme.palette.getContrastText(deepOrange[100]),\n    backgroundColor: deepOrange[100],\n    marginRight: theme.spacing(2),\n  },\n  purpleLong: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n    marginRight: theme.spacing(2),\n  },\n  purpleShort: {\n    color: theme.palette.getContrastText(deepPurple[100]),\n    backgroundColor: deepPurple[100],\n    marginRight: theme.spacing(2),\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[500]),\n    backgroundColor: grey[500],\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst LOAD_EXPIRATIONS_QUERY = gql`\n    query stock($symbol: String!) {\n        stock(symbol: $symbol) {\n            id\n            symbol\n            expirations {\n                id\n                date\n            }\n        }\n    }\n`;\n\ninterface LegOverviewProps {\n  symbol: string,\n  leg: Partial<Leg>,\n  setTempLeg: (leg: Partial<Leg>) => void,\n}\n\nfunction LegOverview(props: LegOverviewProps) {\n  const classes = legOverviewStyles();\n\n  const expirationsQuery = useQuery(LOAD_EXPIRATIONS_QUERY, {\n    variables: {symbol: props.symbol}\n  });\n\n  function PutCallView() {\n    const r = (className: string, fullName: string, shortName: string) => (\n        <Tooltip title={fullName}>\n          <Avatar className={className}>{shortName}</Avatar>\n        </Tooltip>\n    );\n    if (!props.leg.quantity || props.leg.putCall === undefined) {\n      return r(classes.grey, \"None\", \"-\");\n    } else if (props.leg.quantity < 0 && props.leg.putCall === PutCall.CALL) {\n      return r(classes.orangeShort, \"Short Call (Net Credit)\", \"CS\");\n    } else if (props.leg.quantity > 0 && props.leg.putCall === PutCall.CALL) {\n      return r(classes.orangeLong, \"Long Call (Net Debit)\", \"CL\");\n    } else if (props.leg.quantity < 0 && props.leg.putCall === PutCall.PUT) {\n      return r(classes.purpleShort, \"Short Put (Net Credit)\", \"PS\");\n    } else if (props.leg.quantity > 0 && props.leg.putCall === PutCall.PUT) {\n      return r(classes.purpleLong, \"Long Put (Net Debit)\", \"PL\");\n    } else {\n      throw new Error(\"Invalid props.leg: \" + props.leg);\n    }\n  }\n\n  return renderQuery(\n      expirationsQuery,\n      <Typography align=\"center\"><CircularProgress/></Typography>,\n      <Alert severity=\"error\">This is an error message!<br/>{\"\" + expirationsQuery.error}</Alert>,\n      data => (\n          <Card className={classes.card}>\n            <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\" className={classes.legOverviewBox}>\n              <PutCallView/>\n              <FormControl\n                  className={classes.expiration}\n                  variant=\"outlined\">\n                <InputLabel>Expiration Date</InputLabel>\n                <Select\n                    onChange={(e) => {\n                      if (e.target.value) {\n                        const newT = deserializeDate(e.target.value as string);\n                        props.setTempLeg({...props.leg, t: newT});\n                      }\n                    }}>\n                  {data.stock.expirations.map((exp: any) => {\n                    const date = deserializeDate(exp.date);\n                    return (\n                        <MenuItem key={exp.date} value={exp.date} selected={date.isSame(props.leg.t)}>\n                          {date.format(\"MMM DD, YYYY\")} ({date.diff(moment(), \"days\")} days)\n                        </MenuItem>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n              <TextField\n                  label=\"Qty\"\n                  type=\"number\"\n                  className={classes.quantity}\n                  variant=\"outlined\"\n                  value={props.leg.quantity}\n                  disabled={!props.leg.t}\n                  onChange={e => props.setTempLeg({...props.leg, quantity: parseInt(e.target.value)})}\n              />\n              <TextField\n                  label=\"Strike\"\n                  type=\"number\"\n                  className={classes.strike}\n                  variant=\"outlined\"\n                  value={props.leg.k}\n                  disabled={!props.leg.t}\n                  onChange={e => props.setTempLeg({...props.leg, k: parseInt(e.target.value)})}\n              />\n              <TextField\n                  label=\"IV\"\n                  type=\"number\"\n                  className={classes.iv}\n                  variant=\"outlined\"\n                  value={props.leg.k}\n                  disabled={true}/>\n            </Box>\n          </Card>\n      )\n  );\n}\n\ntype OptionChainProps = {\n  symbol: string,\n  expirationDate: moment.Moment,\n  setTempLeg: (leg: Partial<Leg>) => void,\n};\n\nconst LOAD_OPTION_QUOTES_QUERY = gql`\n    query OptionQuotes($symbol: String!, $date: Date!) {\n        expiration(symbol: $symbol, date: $date) {\n            id\n            quotes {\n                id\n                putCall\n                strikePrice\n                bid\n                ask\n                last\n                impliedVolatility\n            }\n        }\n    }\n`;\n\nconst optionChainStyles = makeStyles((theme: Theme) => ({\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[300]),\n    backgroundColor: grey[300],\n    borderBottomColor: grey[300],\n  },\n}));\n\n\nfunction OptionChain(props: OptionChainProps) {\n  const classes = optionChainStyles();\n  const query = useQuery(LOAD_OPTION_QUOTES_QUERY, {\n    variables: {symbol: props.symbol, date: props.expirationDate}\n  });\n\n  function renderTable(data: any) {\n    const quotes: number[] = data.expiration.quotes;\n    const strikes: number[] = _.chain(quotes)\n        .map((q: any) => q.strikePrice)\n        .sortBy()\n        .sortedUniq()\n        .value();\n\n    const forStrike = (strike: number, putCall: string): number | undefined => (_.chain(quotes)\n            .filter((q: any) => q.strikePrice === strike && q.putCall === putCall)\n            .head()\n            .value()\n    );\n\n    return (\n        <TableContainer style={{maxHeight: \"50vh\"}}>\n          <Table stickyHeader size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\" className={classes.orange}>Last</TableCell>\n                <TableCell align=\"center\" className={classes.orange}>Bid</TableCell>\n                <TableCell align=\"center\" className={classes.orange}>Ask</TableCell>\n                <TableCell align=\"center\" className={classes.grey}>Strike</TableCell>\n                <TableCell align=\"center\" className={classes.purple}>Bid</TableCell>\n                <TableCell align=\"center\" className={classes.purple}>Ask</TableCell>\n                <TableCell align=\"center\" className={classes.purple}>Last</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {strikes.map(strike => {\n                const call: any = forStrike(strike, \"CALL\");\n                const put: any = forStrike(strike, \"PUT\");\n                const cell = (k: number, putCall: PutCall, entryCost: number, quantity: number) => (\n                    <Button onClick={() => props.setTempLeg({putCall, k, quantity})}>\n                      {entryCost.toFixed(2)}\n                    </Button>\n                );\n                return (\n                    <TableRow key={strike} hover>\n                      <TableCell align=\"center\">{cell(strike, PutCall.CALL, call.last, 1)}</TableCell>\n                      <TableCell align=\"center\">{cell(strike, PutCall.CALL, call.bid, -1)}</TableCell>\n                      <TableCell align=\"center\">{cell(strike, PutCall.CALL, call.ask, 1)}</TableCell>\n                      <TableCell align=\"center\" className={classes.grey}><b>{strike}</b></TableCell>\n                      <TableCell align=\"center\">{cell(strike, PutCall.PUT, put.bid, -1)}</TableCell>\n                      <TableCell align=\"center\">{cell(strike, PutCall.PUT, put.ask, 1)}</TableCell>\n                      <TableCell align=\"center\">{cell(strike, PutCall.PUT, put.last, 1)}</TableCell>\n                    </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n    )\n  }\n\n  return renderQuery(query,\n      <Typography align=\"center\"><CircularProgress/></Typography>,\n      <Alert severity=\"error\">Could not load option quotes, please try again.<br/>{\"\" + query.error}</Alert>,\n      renderTable,\n  );\n}\n\nconst renderQuery = (query: any, loading: any, error: any, f: (data: any) => any) => {\n  if (query.loading) {\n    return loading;\n  } else if (query.error) {\n    return error;\n  } else {\n    return f(query.data)\n  }\n};\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport {portfolioNetValuePoint} from \"./blackscholes\";\nimport * as Portfolio from \"./portfolio\";\nimport {getEarliestExpiration} from \"./portfolio\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport {AppBar, Icon, IconButton, Toolbar} from '@material-ui/core';\nimport 'typeface-roboto';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Link from \"@material-ui/core/Link\";\nimport LooksIcon from '@material-ui/icons/Looks';\nimport {Contours} from \"./contours\";\nimport moment from \"moment\";\nimport {drawerWidth, LeftDrawer} from \"./left-drawer\";\nimport {SelectLegModal} from \"./select-leg-modal\";\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  titleLink: {\n    color: '#FFF',\n  },\n  toolbar: theme.mixins.toolbar,\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  content: {\n    top: 0,\n    right: 0,\n    width: `calc(100% - ${drawerWidth}px)`,\n    height: '100%',\n    display: 'flex',\n    position: 'fixed',\n    overflowY: 'hidden',\n    padding: 0,\n  },\n}));\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const [r, setR] = useState(0.007);\n  const [portfolio, setPortfolio] = useState(Portfolio.portfolio);\n  const [mouseST, setMouseST] = useState({s: 0, t: moment(), mouseX: 0, mouseY: 0, show: false});\n  // TODO(advait): Allow us to modify the time window via state\n  const timeWindow = {t0: portfolio.entryTime, tFinal: getEarliestExpiration(portfolio)};\n  const [symbol, setSymbol] = useState(\"TSLA\");\n  const [entryStockPrice, setEntryStockPrice] = useState(5);\n\n  const portfolioValue = portfolioNetValuePoint(entryStockPrice, mouseST.s, mouseST.t, portfolio, r);\n\n  return (\n      <div className={classes.root}>\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Icon edge=\"start\" className={classes.menuButton}>\n              <Link href=\"/\" underline='none' className={classes.titleLink}>\n                <LooksIcon/>\n              </Link>\n            </Icon>\n            <Link href=\"/\" underline='none' variant=\"h6\" className={classes.titleLink}>\n              Rainbow Options Calculator\n            </Link>\n            <div style={{flexGrow: 1}}/>\n            <div>\n              <IconButton\n                  aria-label=\"link to github\"\n                  aria-controls=\"menu-appbar\"\n                  aria-haspopup=\"true\"\n                  color=\"inherit\">\n                <Link href=\"https://github.com/advait/rainbow-options\" className={classes.titleLink} target=\"_blank\">\n                  <GitHubIcon/>\n                </Link>\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n        <LeftDrawer\n            portfolio={portfolio}\n            setPortfolio={setPortfolio}\n            portfolioValue={portfolioValue}\n            r={r}\n            setR={setR}\n            timeWindow={timeWindow}\n            symbol={symbol}\n            setSymbol={setSymbol}\n            entryStockPrice={entryStockPrice}\n            setEntryStockPrice={setEntryStockPrice}\n            mouseST={mouseST}\n            setST={setMouseST}\n        />\n        <main className={classes.content}>\n          <Contours\n              portfolio={portfolio}\n              portfolioValue={portfolioValue}\n              r={r}\n              timeWindow={timeWindow}\n              entryStockPrice={entryStockPrice}\n              setEntryStockPrice={setEntryStockPrice}\n              st={mouseST}\n              setST={setMouseST}\n          />\n        </main>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {wrapReact} from \"./graphql\";\n\nReactDOM.render(wrapReact(<App/>), document.getElementById(\"root\"));\n"],"sourceRoot":""}