{"version":3,"sources":["blackscholes.gpu.js","graphql.tsx","util.tsx","portfolio.ts","contours.js","option-leg-card.tsx","left-drawer.tsx","navbar.tsx","App.tsx","index.js"],"names":["normalPdf","x","Math","sqrt","PI","exp","pow","normalCdf","t","abs","probability","d1","s","k","r","sigma","log","d2","d1_","euroCall","max","d2_","euroPut","euroDeltaCall","euroDeltaPut","euroGamma","euroThetaCall","euroThetaPut","gpu","GPU","portfolioValue","widthPx","heightPx","t0","tFinal","y0","yFinal","portfolio","performance","mark","x0","diff","entryTime","xFinal","kernel","createKernel","serializedPortfolio","y","floor","this","thread","price","entryCost","legsLength","totalValue","i","quantity","type","legT","iv","summedResults","setOutput","render","ret","push","legs","length","forEach","leg","putCall","PutCall","PUT","serializePortfolio","destroy","minValue","Infinity","value","pctGain","map","v","measure","addFunction","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","deserializeDate","moment","serializeDate","d","format","assert","condition","message","Error","BlurInput","props","useState","tempValue","setTempValue","childProps","onChange","e","target","onKeyPress","key","setValue","onBlur","TextField","require","Portfolio","entryStockPrice","getEarliestExpiration","arr","l","sort","a","b","isBefore","weightedIV","ivs","weights","weightedAverage","_","sum","toURLSlug","JSON","stringify","grossValuePoint","chain","legGrossValueAtPoint","greeks","allLegGreeks","CALL","delta","gamma","theta","legGreeks","deltas","o","gammas","thetas","quantities","avgDelta","avgGamma","avgTheta","maxLossValue","maxLoss","deltaPct","gammaPct","thetaPct","memoize","netValuePoint","entryValue","endingValue","netValue","isMoment","other","fromURLSlug","slug","temp","parse","decodeURI","defaultPortfolio","add","values","zip","contoursStyles","makeStyles","theme","outerContainer","width","height","toolbar","mixins","contoursInnerContainer","position","d3Container","zIndex","svg","Contours","classes","className","Toolbar","id","GainsTooltip","st","D3Contours","d3ContainerRef","React","createRef","stockPriceWindow","timeWindow","show","node","parentElement","bounds","getBoundingClientRect","clientX","left","clientY","top","tScale","invert","yScale","setST","mouseX","mouseY","initD3","updateD3","resizeListener","window","addEventListener","removeEventListener","nextProps","nextState","nextContext","equals","ref","onMouseMove","updateST","onMouseOut","container","current","offsetWidth","offsetHeight","d3","attr","domain","range","yAxis","scale","valueOf","tAxis","append","call","appendChild","clearMarks","clearMeasures","contourWidth","contourHeight","computedPortfolioValue","contours","size","console","getEntriesByType","contourPath","projection","point","stream","select","selectAll","data","join","Component","style","display","hidden","backgroundColor","padding","borderRadius","transform","toFixed","optionLegStyles","card","marginLeft","spacing","marginRight","marginTop","marginBottom","overflow","cardHeader","cursor","expand","transition","transitions","create","duration","shortest","expandOpen","contentRow","alignItems","justifyContent","bottomMargin","largeButtonGroup","flexGrow","flexShrink","largeButton","paddingLeft","paddingRight","smallButtonGroup","smallButton","margin","minWidth","descriptionValueParent","flexDirection","description","fontSize","color","grey","marginTOp","orangeLong","palette","getContrastText","deepOrange","orangeShort","purpleLong","deepPurple","purpleShort","OptionLegCard","expanded","setExpanded","cond","test","und","undefined","quantityStr","q","putCallStr","pc","longShortStr","avatarStr","strikeStr","exprStr","callButtonClass","putButtonClass","setExpiration","setLeg","clone","setQuantity","newQuantity","setStrike","setPutCall","setIV","Card","elevation","CardHeader","avatar","Tooltip","title","Avatar","clsx","subheader","action","IconButton","onClick","Collapse","in","timeout","Divider","Box","ButtonGroup","orientation","variant","Button","edge","deleteLeg","Fragment","portfolioSummaryStyles","paddingTop","flexBasis","descriptionValueParentShrink","textCenter","textAlign","PortfolioSummary","drawerStyles","drawer","overflowX","drawerPaper","drawerTypography","drawerTypographySmall","addIconButton","alignSelf","LeftDrawer","legIndex","setPortfolio","withNewLegs","filter","Drawer","paper","anchor","Grid","item","xs","label","fullWidth","symbol","setSymbol","newStockPrice","parseFloat","Typography","newLeg","newLegs","startIcon","noValidate","autoComplete","setR","navbarStyles","appBar","titleLink","primary","contrastText","menuButton","Navbar","AppBar","Icon","Link","href","process","underline","aria-label","aria-controls","aria-haspopup","useStyles","root","content","right","overflowY","App","tree","history","useHistory","urlParams","useParams","replace","url","p","mouseST","setMouseST","stockPriceRange","ReactDOM","path","document","getElementById"],"mappings":"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","file":"static/js/main.8e672804.chunk.js","sourcesContent":["import { GPU } from \"gpu.js\";\nimport { PutCall } from \"./portfolio\";\n\n/**\n * Black Scholes equations explicitly designed to run on the GPU via gpu.js.\n * Thanks to: https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model#Black%E2%80%93Scholes_equation\n */\n\n/**\n * The PDF of the normal distribution with mean = 1 and stdev = 1.\n * @param x {number} the value to look up.\n * @return {number} the PDF value.\n */\nexport function normalPdf(x) {\n  return (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-(Math.pow(x, 2) / 2));\n}\n\n/**\n * The CDF of the normal distribution with mean = 0 and stdev = 1.\n * @param x {number} the value to look up.\n * @returns {number} the CDF value.\n */\nexport function normalCdf(x) {\n  // HASTINGS.  MAX ERROR = .000001\n  const t = 1 / (1 + 0.2316419 * Math.abs(x));\n  const d = 0.3989423 * Math.exp((-x * x) / 2);\n  const probability =\n    d *\n    t *\n    (0.3193815 +\n      t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));\n  if (x > 0) {\n    return 1 - probability;\n  } else {\n    return probability;\n  }\n}\n\n/**\n * Standard d1 term used in option pricing.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function d1(s, k, t, r, sigma) {\n  return (\n    (Math.log(s / k) + (r + Math.pow(sigma, 2) / 2) * t) /\n    (sigma * Math.sqrt(t))\n  );\n}\n\n/**\n * Standard d2 term used in option pricing.\n * @param d1_ {Number} The value of d1\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function d2(d1_, s, k, t, r, sigma) {\n  return d1_ - sigma * Math.sqrt(t);\n}\n\n/**\n * Returns the value of a European call option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroCall(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, s - k);\n  } else if (t < 0) {\n    return 0;\n  }\n\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n  return s * normalCdf(d1_) - k * Math.exp(-r * t) * normalCdf(d2_);\n}\n\n/**\n * Returns the value of a European put option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroPut(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, k - s);\n  } else if (t < 0) {\n    return 0;\n  }\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n  return k * Math.exp(-r * t) * normalCdf(-d2_) - s * normalCdf(-d1_);\n}\n\n/**\n * Returns the greek delta for a call option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroDeltaCall(s, k, t, r, sigma) {\n  return normalCdf(d1(s, k, t, r, sigma));\n}\n\n/**\n * Returns the greek delta for a put option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroDeltaPut(s, k, t, r, sigma) {\n  return normalCdf(d1(s, k, t, r, sigma)) - 1;\n}\n\n/**\n * Returns the greek gamma.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroGamma(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  return (1 / (s * sigma * Math.sqrt(t))) * normalPdf(d1_);\n}\n\n/**\n * Returns the greek vega.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroVega(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  return (s / 100) * Math.sqrt(t) * normalPdf(d1_);\n}\n\n/**\n * Returns the greek rho for a call option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroRhoCall(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n  return (k / 100) * t * Math.exp(-r * t) * normalCdf(d2_);\n}\n\n/**\n * Returns the greek rho for a put option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroRhoPut(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n  return (-k / 100) * t * Math.exp(-r * t) * normalCdf(-d2_);\n}\n\n/**\n * Returns the greek theta for a put option quoted in terms of dollars changed\n * per day.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroThetaCall(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n\n  const p1 = (s * normalPdf(d1_) * sigma) / (2 * Math.sqrt(t));\n  const p2 = r * k * Math.exp(-r * t) * normalCdf(d2_);\n  const thetaPerYear = -p1 - p2;\n  return thetaPerYear / 365;\n}\n\n/**\n * Returns the greek theta for a call option quoted in terms of dollars changed\n * per day.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n */\nexport function euroThetaPut(s, k, t, r, sigma) {\n  const d1_ = d1(s, k, t, r, sigma);\n  const d2_ = d2(d1_, s, k, t, r, sigma);\n\n  const p1 = (s * normalPdf(d1_) * sigma) / (2 * Math.sqrt(t));\n  const p2 = r * k * Math.exp(-r * t) * normalCdf(-d2_);\n  const thetaPerYear = -p1 + p2;\n  return thetaPerYear / 365;\n}\n\nconst gpu = new GPU();\ngpu.addFunction(normalPdf);\ngpu.addFunction(normalCdf);\ngpu.addFunction(d1);\ngpu.addFunction(d2);\ngpu.addFunction(euroCall);\ngpu.addFunction(euroPut);\n\n/**\n * Serializes a portfolio into an array that can be read by the GPU.\n * @param portfolio {Portfolio}\n * @param r {number} Risk-free interest rate\n * @returns number[]\n */\nfunction serializePortfolio(portfolio, r) {\n  const ret = [];\n  // First push portfolio metadata\n  ret.push(portfolio.entryCost(r));\n  ret.push(portfolio.legs.length);\n  // Next push each leg data sequentially\n  portfolio.legs.forEach((leg) => {\n    ret.push(leg.quantity);\n    ret.push(leg.putCall === PutCall.PUT ? 0 : 1);\n    ret.push(leg.k);\n    ret.push(leg.t.diff(portfolio.entryTime, \"years\", true));\n    ret.push(leg.iv);\n  });\n  return ret;\n}\n\n/**\n * Uses the GPU to compute a grid of values of profitability for the given portfolio.\n * @param widthPx {number} The number of horizontal points to measure\n * @param heightPx {number} The number of vertical points to measure\n * @param t0 {number} The left-most value on the horizontal axis (time)\n * @param tFinal {number} The right-most value on the horizontal axis (time)\n * @param y0 {number} The top-most value on the vertical axis (stock price)\n * @param yFinal {number} The bottom-most value on the vertical axis (stock price)\n * @param portfolio {Portfolio} The portfolio whose value to compute\n * @param r {number} The risk-free interest rate\n * @returns {{minValue: number, pctGain: number[]}}\n */\nexport function portfolioValue(\n  widthPx,\n  heightPx,\n  t0,\n  tFinal,\n  y0,\n  yFinal,\n  portfolio,\n  r\n) {\n  performance.mark(\"portfolioValueStart\");\n\n  // Switch from moment dates to number dates in terms of fractions of years\n  const x0 = t0.diff(portfolio.entryTime, \"years\", true);\n  const xFinal = tFinal.diff(portfolio.entryTime, \"years\", true);\n\n  // Compute the net value (value - entry cost) for the whole options portfolio on the gpu\n  performance.mark(\"gpuLegStart\");\n  let kernel = gpu.createKernel(function (\n    widthPx,\n    heightPx,\n    x0,\n    xFinal,\n    y0,\n    yFinal,\n    serializedPortfolio,\n    r\n  ) {\n    const y = Math.floor(this.thread.x / widthPx);\n    const x = this.thread.x % widthPx;\n    let t0 = (x / widthPx) * (xFinal - x0) + x0;\n    let price = (y / heightPx) * (yFinal - y0) + y0;\n    const entryCost = serializedPortfolio[0];\n    const legsLength = serializedPortfolio[1];\n    const metadataPerLeg = 5;\n    let totalValue = 0;\n    for (let i = 0; i < legsLength; i++) {\n      const quantity = serializedPortfolio[i * metadataPerLeg + 2];\n      const type = serializedPortfolio[i * metadataPerLeg + 3];\n      const k = serializedPortfolio[i * metadataPerLeg + 4];\n      const legT = serializedPortfolio[i * metadataPerLeg + 5];\n      const iv = serializedPortfolio[i * metadataPerLeg + 6];\n      if (type === 0) {\n        totalValue += quantity * euroPut(price, k, legT - t0, r, iv);\n      } else {\n        totalValue += quantity * euroCall(price, k, legT - t0, r, iv);\n      }\n    }\n    return totalValue - entryCost;\n  });\n  let render = kernel.setOutput([widthPx * heightPx]);\n  const serializedPortfolio = serializePortfolio(portfolio, r);\n  const summedResults = render(\n    widthPx,\n    heightPx,\n    x0,\n    xFinal,\n    y0,\n    yFinal,\n    serializedPortfolio,\n    r\n  );\n  kernel.destroy();\n\n  // Compute min value so we can normalize based on pct gain\n  let minValue = Infinity;\n  for (let i = 0; i < summedResults.length; i++) {\n    const value = summedResults[i];\n    if (value < minValue) {\n      minValue = value;\n    }\n  }\n  const pctGain = summedResults.map((v) => v / -minValue); // -1 to +Inf\n  performance.measure(\"portfolioValue\", \"portfolioValueStart\");\n\n  return {\n    pctGain,\n    minValue,\n  };\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-boost\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:4000\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nexport function wrapReact(tree: any) {\n  return <ApolloProvider client={client}>{tree}</ApolloProvider>;\n}\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nexport function deserializeDate(s: string): moment.Moment {\n  // TODO(advait): This should really be handled transparently by Apollo\n  // Consider implementing: https://github.com/eturino/apollo-link-scalars?ts=2\n  return moment(s, DATE_FORMAT);\n}\n\nexport function serializeDate(d: moment.Moment): string {\n  return d.format(DATE_FORMAT);\n}\n","/**\n * If the condition is false, throw an Error with the given message.\n * @param condition\n * @param message\n */\nimport { OutlinedTextFieldProps, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nexport function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexport interface BlurInputProps extends OutlinedTextFieldProps {\n  value: string;\n  setValue: (t: string) => void;\n}\n\n/**\n * Temporarily holds onto input changes and only calls setValue when the\n * enter key is pressed or when the input is blurred.\n */\nexport function BlurInput(props: BlurInputProps) {\n  const [tempValue, setTempValue] = useState(props.value);\n  const onChange = (e: any) => setTempValue(e.target.value);\n  const onKeyPress = (e: any) => {\n    if (e.key === \"Enter\") {\n      props.setValue(tempValue);\n    }\n  };\n  const onBlur = () => props.setValue(tempValue);\n\n  const childProps = {\n    ...props,\n    onChange,\n    onKeyPress,\n    onBlur,\n    value: tempValue,\n  };\n  return <TextField {...childProps} />;\n}\n","import _ from \"lodash\";\nimport { Moment } from \"moment\";\nimport {\n  euroCall,\n  euroDeltaCall,\n  euroDeltaPut,\n  euroGamma,\n  euroPut,\n  euroThetaCall,\n  euroThetaPut,\n} from \"./blackscholes.gpu\";\nimport { deserializeDate, serializeDate } from \"./graphql\";\nimport { assert } from \"./util\";\n\nconst moment = require(\"moment\");\n\n/**\n * Whether an Option is a Put or a Call.\n */\nexport enum PutCall {\n  PUT,\n  CALL,\n}\n\n/**\n * Represents a single leg/option within an options portfolio.\n */\nexport type Leg = {\n  readonly quantity: number;\n  readonly putCall: PutCall;\n  readonly k: number;\n  readonly t: Moment;\n  readonly iv: number;\n};\n\n/**\n * Represents an options portfolio consisting of multiple legs.\n */\nexport class Portfolio {\n  readonly legs: Leg[];\n  readonly entryTime: Moment;\n  readonly entryStockPrice: number;\n\n  constructor(legs: Leg[], entryTime: Moment, entryStockPrice: number) {\n    assert(legs.length > 0, \"Portfolio must have legs\");\n    assert(moment.isMoment(entryTime), \"entryTime must be a date\");\n    assert(entryStockPrice > 0, \"Stock price must be > 0\");\n    this.legs = legs;\n    this.entryTime = entryTime;\n    this.entryStockPrice = entryStockPrice;\n  }\n\n  /**\n   * Returns the expiration date of the earliest-expiring option in the portfolio.\n   */\n  getEarliestExpiration = (): Moment => {\n    const arr = this.legs.map((l) => l.t);\n    arr.sort((a, b) => (a.isBefore(b) ? -1 : 1));\n    return arr[0];\n  };\n\n  /**\n   * Returns the overall portfolio IV as a weighted average of each leg's IV where the weight is the absolute value of\n   * the quantity.\n   */\n  weightedIV = (): number => {\n    const ivs = this.legs.map((l) => Math.abs(l.quantity) * l.iv);\n    const weights = this.legs.map((l) => Math.abs(l.quantity));\n    return weightedAverage(ivs, weights) / _.sum(weights);\n  };\n\n  toURLSlug = (): string => {\n    return JSON.stringify({\n      legs: this.legs.map((l) => ({ ...l, t: serializeDate(l.t) })),\n      entryTime: serializeDate(this.entryTime),\n      entryStockPrice: this.entryStockPrice,\n    });\n  };\n\n  static fromURLSlug = _.memoize(\n    (slug: string): Portfolio => {\n      const temp = JSON.parse(decodeURI(slug));\n      const legs = temp.legs.map((l: any) => ({\n        ...l,\n        t: deserializeDate(l.t),\n      }));\n      const entryTime = deserializeDate(temp.entryTime);\n      return new Portfolio(legs, entryTime, temp.entryStockPrice);\n    }\n  );\n\n  /**\n   * Returns the total value of the portfolio at a given stock price and time.\n   * @param s Stock price\n   * @param t Point in time to measure the portfolio value\n   * @param r risk free rate\n   * @returns gross value of the portfolio\n   */\n  grossValuePoint = (s: number, t: Moment, r: number): number => {\n    return _.chain(this.legs)\n      .map((leg) => leg.quantity * legGrossValueAtPoint(s, t, leg, r))\n      .sum()\n      .value();\n  };\n\n  greeks = (s: number, t: Moment, r: number) => {\n    const allLegGreeks = this.legs.map((leg) => legGreeks(s, t, leg, r));\n    const deltas = allLegGreeks.map((o) => o.delta);\n    const gammas = allLegGreeks.map((o) => o.gamma);\n    const thetas = allLegGreeks.map((o) => o.theta);\n    const quantities = this.legs.map((l) => l.quantity);\n\n    const avgDelta = weightedAverage(deltas, quantities);\n    const avgGamma = weightedAverage(gammas, quantities);\n    const avgTheta = weightedAverage(thetas, quantities);\n    const maxLossValue = this.maxLoss(r);\n    return {\n      delta: avgDelta,\n      deltaPct: avgDelta / -maxLossValue,\n      gamma: avgGamma,\n      gammaPct: avgGamma / -maxLossValue,\n      theta: avgTheta,\n      thetaPct: avgTheta / -maxLossValue,\n    };\n  };\n\n  entryCost = _.memoize((r: number): number => {\n    return this.grossValuePoint(this.entryStockPrice, this.entryTime, r);\n  });\n\n  maxLoss = (r: number): number => {\n    // TODO(advait): Compute this based on the four corners approach and cache\n    return -this.entryCost(r);\n  };\n\n  /**\n   * Returns the value of the portfolio at a given stock price and time.\n   * @param s The stock price that we are using to lookup the portfolio value\n   * @param t Point in time to measure the portfolio value\n   * @param r risk free rate\n   * @returns value of the portfolio\n   */\n  netValuePoint = (s: number, t: Moment, r: number) => {\n    const entryValue = this.entryCost(r);\n    const endingValue = this.grossValuePoint(s, t, r);\n\n    const netValue = endingValue - entryValue;\n    const pctGain = netValue / entryValue;\n    return {\n      endingValue,\n      netValue,\n      pctGain,\n    };\n  };\n\n  /**\n   * Returns a new portfolio with the same entry time/cost but the provided\n   * legs.\n   * @param legs\n   */\n  withNewLegs(legs: Leg[]): Portfolio {\n    return new Portfolio(legs, this.entryTime, this.entryStockPrice);\n  }\n\n  /**\n   * Returns whether the two portfolios are equal.\n   * @param other\n   */\n  equals(other: Portfolio): boolean {\n    return this.toURLSlug() === other.toURLSlug();\n  }\n}\n\nexport const defaultPortfolio: Portfolio = new Portfolio(\n  [\n    {\n      quantity: 1,\n      putCall: PutCall.CALL,\n      k: 4,\n      t: moment().add(182, \"days\"),\n      iv: 1.2,\n    },\n  ],\n  moment(),\n  5\n);\n\n/**\n * Returns the entry cost of a single leg (ignoring quantity) at the given stock price and time.\n * @param s Stock price\n * @param t Point in time to measure the portfolio value\n * @param leg the leg to measure\n * @param r risk free rate\n * @returns gross value of the portfolio\n */\nexport function legGrossValueAtPoint(\n  s: number,\n  t: Moment,\n  leg: Leg,\n  r: number\n) {\n  if (leg.putCall === PutCall.CALL) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return euroCall(s, leg.k, legT, r, leg.iv);\n  } else if (leg.putCall === PutCall.PUT) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return euroPut(s, leg.k, legT, r, leg.iv);\n  } else {\n    throw Error(\"Invalid type: \" + leg.putCall);\n  }\n}\n\nexport function legGreeks(s: number, t: Moment, leg: Leg, r: number) {\n  if (leg.putCall === PutCall.CALL) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return {\n      delta: euroDeltaCall(s, leg.k, legT, r, leg.iv),\n      gamma: euroGamma(s, leg.k, legT, r, leg.iv),\n      theta: euroThetaCall(s, leg.k, legT, r, leg.iv),\n    };\n  } else if (leg.putCall === PutCall.PUT) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return {\n      delta: euroDeltaPut(s, leg.k, legT, r, leg.iv),\n      gamma: euroGamma(s, leg.k, legT, r, leg.iv),\n      theta: euroThetaPut(s, leg.k, legT, r, leg.iv),\n    };\n  } else {\n    throw Error(\"Invalid type: \" + leg.putCall);\n  }\n}\n\ntype NumbersMap = { [k: string]: number };\n\n/**\n * Given two objects whose values are numbers, return a new object whose\n * values are the sum of the source objects' values.\n * @param a\n * @param b\n */\nfunction sumObjectValues(a: NumbersMap, b: NumbersMap): NumbersMap {\n  return _.mapValues(a, (_, key) => a[key] + b[key]);\n}\n\n/**\n * Computes the weigted average of the given values. If the weights do not\n * add up to 1 the caller must adjust as appropriate.\n * @param values\n * @param weights\n */\nfunction weightedAverage(values: number[], weights: number[]): number {\n  return _.chain(_.zip(values, weights))\n    .map(([value, weight]) => (value || 0) * (weight || 0))\n    .sum()\n    .value();\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { portfolioValue } from \"./blackscholes.gpu\";\nimport moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport * as _ from \"lodash\";\nimport { assert } from \"./util\";\n\nconst contoursStyles = makeStyles((theme) => ({\n  outerContainer: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  toolbar: theme.mixins.toolbar,\n  contoursInnerContainer: {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n  d3Container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 1,\n  },\n  svg: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 2,\n  },\n}));\n\nexport function Contours(props) {\n  const classes = contoursStyles();\n  return (\n    <div className={classes.outerContainer}>\n      <Toolbar className={classes.toolbar} />\n      <div\n        id=\"contoursInnerContainer\"\n        className={classes.contoursInnerContainer}\n      >\n        <D3Contours {...props} className={classes.d3Container} />\n        <GainsTooltip\n          st={props.st}\n          pctGain={props.portfolioValue.pctGain}\n          className={classes.svg}\n        />\n      </div>\n    </div>\n  );\n}\n\nclass D3Contours extends React.Component {\n  constructor(props) {\n    super(props);\n    this.d3ContainerRef = React.createRef();\n    this.stockPriceWindow = this.props.stockPriceWindow;\n    this.timeWindow = this.props.timeWindow;\n    this.portfolio = this.props.portfolio;\n    this.r = this.props.r;\n  }\n\n  /**\n   * Handle a mouse move/out event, update the S and T positions based on the coordinates of the mouse.\n   * @param e {MouseEvent}\n   * @param show {boolean} whether to show the gains tooltip (is the mouse over the contour graph?)\n   */\n  updateST(e, show) {\n    let node = e.target;\n    while (node.id !== \"contoursInnerContainer\") {\n      node = node.parentElement;\n      if (!node) {\n        throw new Error(\"Could not find contoursInnerContainer\");\n      }\n    }\n    const bounds = node.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const t = this.tScale.invert(x);\n    const s = this.yScale.invert(y);\n    this.props.setST({\n      s,\n      t: moment(t),\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      show,\n    });\n  }\n\n  componentDidMount() {\n    this.initD3();\n    this.updateD3();\n\n    this.resizeListener = _.debounce(() => this.updateD3(), 10);\n    window.addEventListener(\"resize\", this.resizeListener);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeListener);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    // Major hacks to get d3 to play nicely with react's lifecycle\n    // Here, we only want to update D3 if any portfolio/options-related props have changed\n    if (\n      !_.isEqual(this.timeWindow, nextProps.timeWindow) ||\n      !_.isEqual(this.stockPriceWindow, nextProps.stockPriceWindow) ||\n      !this.portfolio.equals(nextProps.portfolio) ||\n      this.r !== nextProps.r\n    ) {\n      // Now that we've confirmed that the props have changed, we need to manually overwrite them\n      this.timeWindow = nextProps.timeWindow;\n      this.stockPriceWindow = nextProps.stockPriceWindow;\n      this.portfolio = nextProps.portfolio;\n      this.r = nextProps.r;\n\n      this.updateD3();\n    }\n\n    // Always prevent react from re-rendering our DOM as d3 is responsible for managing it.\n    return false;\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.d3ContainerRef}\n        onMouseMove={(e) => this.updateST(e, true)}\n        onMouseOut={(e) => this.updateST(e, false)}\n        className={this.props.className}\n      />\n    );\n  }\n\n  initD3() {\n    const container = this.d3ContainerRef.current;\n    assert(!!container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100;\n    const height = container.offsetHeight || 100;\n\n    this.svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n\n    this.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([this.stockPriceWindow.y0, this.stockPriceWindow.yFinal])\n      .range([0, height]);\n\n    this.yAxis = d3.axisRight().scale(this.yScale);\n\n    this.tScale = this.tScale = d3\n      .scaleUtc()\n      .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n      .range([0, width]);\n\n    this.tAxis = d3.axisBottom().scale(this.tScale);\n\n    this.svg\n      .append(\"g\")\n      .attr(\"class\", \"contours\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-opacity\", 0.5);\n\n    this.svg\n      .append(\"g\")\n      .attr(\"class\", \"t-axis\")\n      .attr(\"transform\", `translate(0,${this.yScale(556)})`)\n      .call(this.tAxis);\n    this.svg.append(\"g\").attr(\"class\", \"y-axis\").call(this.yAxis);\n\n    container.appendChild(this.svg.node());\n  }\n\n  updateD3() {\n    performance.clearMarks();\n    performance.clearMeasures();\n\n    const container = this.d3ContainerRef.current;\n    assert(!!container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100;\n    const height = container.offsetHeight || 100;\n\n    this.yScale\n      .domain([this.stockPriceWindow.y0, this.stockPriceWindow.yFinal])\n      .range([0, height]);\n\n    this.tScale\n      .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n      .range([0, width]);\n\n    // Rather than compute the price for every pixel (resource intensive), we first scale down\n    // and then scale up the d3 contour projection below.\n    const scaleDownFactor = 4;\n    const contourWidth = Math.floor(width / scaleDownFactor);\n    const contourHeight = Math.floor(height / scaleDownFactor);\n    const computedPortfolioValue = portfolioValue(\n      contourWidth,\n      contourHeight,\n      this.timeWindow.t0,\n      this.timeWindow.tFinal,\n      this.stockPriceWindow.y0,\n      this.stockPriceWindow.yFinal,\n      this.portfolio,\n      this.r\n    );\n\n    performance.mark(\"d3ContoursStart\");\n    const contours = d3.contours().size([contourWidth, contourHeight])(\n      computedPortfolioValue.pctGain\n    );\n    performance.mark(\"d3ContoursEnd\");\n    performance.measure(\"d3Contours\", \"d3ContoursStart\", \"d3ContoursEnd\");\n    console.log(performance.getEntriesByType(\"measure\"));\n\n    const contourPath = d3.geoPath().projection(\n      d3.geoTransform({\n        point: function (x, y) {\n          this.stream.point(\n            (x / contourWidth) * width,\n            (y / contourWidth) * width\n          );\n        },\n      })\n    );\n\n    // Contour thresholds (pct gains) and the corresponding colors\n    const interpolatePctGain = (pctGain) => {\n      if (pctGain <= 0) {\n        return d3.scaleLinear().domain([-1, 0]).range([0, 0.5])(pctGain);\n      } else {\n        return d3.scalePow().domain([0, 3]).range([0.5, 1])(pctGain);\n      }\n    };\n\n    this.svg.attr(\"viewBox\", [0, 0, width, height]);\n\n    this.svg\n      .select(\".contours\")\n      .selectAll(\"path\")\n      .data(contours)\n      .join(\"path\")\n      .attr(\"fill\", (d) => d3.interpolateSpectral(interpolatePctGain(d.value)))\n      .attr(\"d\", contourPath);\n\n    this.svg\n      .select(\".t-axis\")\n      .attr(\n        \"transform\",\n        `translate(0,${this.yScale(this.portfolio.entryStockPrice)})`\n      )\n      .call(this.tAxis);\n\n    this.svg.select(\".y-axis\").call(this.yAxis);\n  }\n}\n\nfunction GainsTooltip(props) {\n  const display = props.hidden ? \"hidden\" : \"inline\";\n  const style = {\n    display,\n    position: \"fixed\",\n    top: props.st.mouseY + 20,\n    left: props.st.mouseX,\n    zIndex: 3,\n    backgroundColor: \"#33333344\",\n    padding: \"6px\",\n    borderRadius: \"4px\",\n    transform: \"translate(-40%, -200%)\",\n  };\n\n  const returns = (pctGain) => {\n    if (pctGain <= 0) {\n      return `${(pctGain * 100).toFixed(2)}%`;\n    } else if (pctGain < 1) {\n      return `+${(pctGain * 100).toFixed(2)}%`;\n    } else {\n      return `${pctGain.toFixed(2)}x`;\n    }\n  };\n\n  return (\n    <div className=\"gains-tooltip\" style={style}>\n      {returns(props.pctGain)}\n    </div>\n  );\n}\n","import {\n  Avatar,\n  Box,\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  Collapse,\n  Theme,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { deepOrange, deepPurple, grey } from \"@material-ui/core/colors\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport clsx from \"clsx\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { Leg, legGrossValueAtPoint, Portfolio, PutCall } from \"./portfolio\";\n\nexport type OptionLegCardProps = {\n  entryStockPrice: number;\n  entryTime: moment.Moment;\n  r: number;\n  leg: Leg;\n  setLeg: (leg: Leg) => void;\n  deleteLeg: () => void;\n};\n\n// @ts-ignore\nconst optionLegStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  largeButtonGroup: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  largeButton: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  smallButtonGroup: {\n    marginRight: theme.spacing(2),\n  },\n  smallButton: {\n    padding: 0,\n    margin: 0,\n    minWidth: \"24px\",\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"column\",\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTOp: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {\n    fontSize: \"18px\",\n  },\n  orangeLong: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  orangeShort: {\n    color: theme.palette.getContrastText(deepOrange[100]),\n    backgroundColor: deepOrange[100],\n  },\n  purpleLong: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n  purpleShort: {\n    color: theme.palette.getContrastText(deepPurple[100]),\n    backgroundColor: deepPurple[100],\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[500]),\n    backgroundColor: grey[500],\n  },\n}));\n\nexport function OptionLegCard(props: OptionLegCardProps) {\n  const classes = optionLegStyles();\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpanded = () => setExpanded(!expanded);\n\n  function cond<T>(\n    test: T | undefined,\n    und: string,\n    other: (t: T) => string\n  ): string {\n    if (test === undefined) {\n      return und;\n    } else {\n      return other(test);\n    }\n  }\n\n  const quantityStr = cond(props.leg.quantity, \"-\", (q) =>\n    q > 0 ? `+${q}` : `${q}`\n  );\n  const putCallStr = cond(props.leg.putCall, \"?\", (pc) =>\n    pc === PutCall.CALL ? \"Call\" : \"Put\"\n  );\n  const longShortStr = cond(props.leg.quantity, \"Long\", (q) =>\n    q < 0 ? \"Short\" : \"Long\"\n  );\n  const avatarStr = `${putCallStr[0]}${longShortStr[0]}`;\n  const strikeStr = cond(props.leg.k, \"?\", (k) => `$${k}`);\n  const exprStr = cond(\n    props.leg.t,\n    \"?\",\n    (t) => `${t.format(\"MMM DD, YYYY\")} (${t.diff(moment(), \"days\")} days)`\n  );\n  let callButtonClass = \"\";\n  if (props.leg.putCall === PutCall.CALL) {\n    callButtonClass =\n      props.leg.quantity && props.leg.quantity < 0\n        ? classes.orangeShort\n        : classes.orangeLong;\n  }\n  let putButtonClass = \"\";\n  if (props.leg.putCall === PutCall.PUT) {\n    putButtonClass =\n      props.leg.quantity && props.leg.quantity < 0\n        ? classes.purpleShort\n        : classes.purpleLong;\n  }\n\n  const setExpiration = (delta: moment.Duration) => () => {\n    props.setLeg({ ...props.leg, t: props.leg.t.clone().add(delta) });\n  };\n  const setQuantity = (delta: number) => () => {\n    let newQuantity = props.leg.quantity + delta;\n    if (newQuantity === 0) {\n      newQuantity += delta;\n    }\n    props.setLeg({ ...props.leg, quantity: newQuantity });\n  };\n  const setStrike = (delta: number) => () => {\n    // TODO(advait): Read the next k from the option chain instead of incrementing\n    props.setLeg({ ...props.leg, k: props.leg.k + delta });\n  };\n  const setPutCall = (putCall: PutCall) => () => {\n    props.setLeg({ ...props.leg, putCall });\n  };\n  const setIV = (delta: number) => () => {\n    props.setLeg({ ...props.leg, iv: props.leg.iv + delta });\n  };\n\n  return (\n    <Card elevation={1} className={classes.card}>\n      <CardHeader\n        avatar={\n          <Tooltip title={`${longShortStr} ${putCallStr}`}>\n            <Avatar className={clsx(putButtonClass, callButtonClass)}>\n              {avatarStr}\n            </Avatar>\n          </Tooltip>\n        }\n        title={`${quantityStr}x @ ${strikeStr} ${putCallStr}`}\n        subheader={`${exprStr}`}\n        action={\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        }\n        onClick={toggleExpanded}\n        className={classes.cardHeader}\n      />\n\n      <Collapse in={expanded} timeout=\"auto\">\n        <Divider className={classes.bottomMargin} />\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"horizontal\"\n            variant=\"outlined\"\n            className={classes.largeButtonGroup}\n          >\n            <Button\n              className={clsx(classes.largeButton, callButtonClass)}\n              onClick={setPutCall(PutCall.CALL)}\n            >\n              {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"}{\" \"}\n              Call\n            </Button>\n            <Button\n              className={clsx(classes.largeButton, putButtonClass)}\n              onClick={setPutCall(PutCall.PUT)}\n            >\n              {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"}{\" \"}\n              Put\n            </Button>\n          </ButtonGroup>\n          <IconButton edge=\"end\">\n            <DeleteIcon onClick={props.deleteLeg} />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setExpiration(moment.duration(1, \"month\"))}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setExpiration(moment.duration(-1, \"month\"))}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Expiration</span>\n            <span className={classes.value}>\n              {props.leg.t ? (\n                <React.Fragment>\n                  {props.leg.t.format(\"MMM DD, YY\")} (\n                  {props.leg.t.diff(moment(), \"days\")} days)\n                </React.Fragment>\n              ) : (\n                \"Unknown\"\n              )}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setQuantity(1)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setQuantity(-1)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div\n            className={classes.descriptionValueParent}\n            style={{ width: \"65px\" }}\n          >\n            <span className={classes.description}>Quantity</span>\n            <span className={classes.value}>\n              {props.leg.quantity ? props.leg.quantity : \"?\"}\n            </span>\n          </div>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setStrike(1)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setStrike(-1)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Strike Price</span>\n            <span className={classes.value}>\n              ${props.leg.k ? props.leg.k.toFixed(2) : \"?\"}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setIV(0.05)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setIV(-0.05)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div\n            className={classes.descriptionValueParent}\n            style={{ width: \"60px\" }}\n          >\n            <span className={classes.description}>Unit Price</span>\n            <span className={classes.value}>\n              $\n              {legGrossValueAtPoint(\n                props.entryStockPrice,\n                props.entryTime,\n                props.leg,\n                props.r\n              ).toFixed(2)}\n            </span>\n          </div>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Implied Volatility</span>\n            <span className={classes.value}>\n              {props.leg.iv ? props.leg.iv.toFixed(2) : \"?\"}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n      </Collapse>\n    </Card>\n  );\n}\n\nexport interface PortfolioSummaryProps {\n  r: number;\n  portfolio: Portfolio;\n}\n\n// @ts-ignore\nconst portfolioSummaryStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    paddingTop: theme.spacing(2),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n  },\n  descriptionValueParentShrink: {\n    display: \"flex\",\n    flexShrink: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n    \"& :last-child\": {\n      fontSize: \"0.875rem\",\n    },\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTop: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {},\n  textCenter: {\n    textAlign: \"center\",\n  },\n}));\n\nexport function PortfolioSummary(props: PortfolioSummaryProps) {\n  const classes = portfolioSummaryStyles();\n\n  const greeks = props.portfolio.greeks(\n    props.portfolio.entryStockPrice,\n    props.portfolio.entryTime,\n    props.r\n  );\n\n  return (\n    <Card className={classes.card}>\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Net Price</span>\n          <span className={classes.value}>\n            ${props.portfolio.entryCost(props.r).toFixed(2)}\n          </span>\n        </div>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Weighted IV</span>\n          <span className={classes.value}>\n            {props.portfolio.weightedIV().toFixed(2)}\n          </span>\n        </div>\n      </Box>\n\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Max Gain</span>\n          <span className={classes.value}>38.39 (32x)</span>\n        </div>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Max Loss</span>\n          <span className={classes.value}>\n            ${props.portfolio.maxLoss(props.r).toFixed(2)} (-100%)\n          </span>\n        </div>\n      </Box>\n\n      <Divider className={classes.bottomMargin} />\n\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <Tooltip title=\"Delta - how much the option value changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x394;\n            </span>\n            <span className={classes.value}>{greeks.delta.toFixed(2)}</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Delta% - how much the option value changes (as a % of max loss) for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x394;%\n            </span>\n            <span className={classes.value}>\n              {(greeks.deltaPct * 100).toFixed(1)}%\n            </span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Gamma - how much Delta changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x194;\n            </span>\n            <span className={classes.value}>{greeks.gamma.toFixed(2)}</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Gamma% - how much Delta% changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x194;%\n            </span>\n            <span className={classes.value}>\n              {(greeks.gammaPct * 100).toFixed(1)}%\n            </span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Theta - how much the option value changes every day due to time decay\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x3F4;\n            </span>\n            <span className={classes.value}>{greeks.theta.toFixed(2)}</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Theta% - how much the option value changes (as a % of max loss) every day due to time decay\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x3F4;%\n            </span>\n            <span className={classes.value}>\n              {(greeks.thetaPct * 100).toFixed(1)}%\n            </span>\n          </div>\n        </Tooltip>\n      </Box>\n    </Card>\n  );\n}\n","import { Button, Drawer, Theme } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { OptionLegCard, PortfolioSummary } from \"./option-leg-card\";\nimport { Leg, Portfolio } from \"./portfolio\";\nimport { BlurInput } from \"./util\";\n\nexport const drawerWidth = 350;\n\n// @ts-ignore\nconst drawerStyles = makeStyles((theme: Theme) => ({\n  toolbar: theme.mixins.toolbar,\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    overflowX: \"hidden\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    overflowX: \"hidden\",\n  },\n  drawerTypography: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  drawerTypographySmall: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  addIconButton: {\n    alignSelf: \"flex-end\",\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport type LeftDrawerProps = {\n  symbol: string;\n  setSymbol: (symbol: string) => void;\n  r: number;\n  setR: (r: number) => void;\n  portfolio: Portfolio;\n  setPortfolio: (p: Portfolio) => void;\n};\n\nexport function LeftDrawer(props: LeftDrawerProps) {\n  const classes = drawerStyles();\n\n  const setLeg = (legIndex: number) => (newLeg: Leg) => {\n    const newLegs = _.clone(props.portfolio.legs);\n    newLegs[legIndex] = newLeg;\n    props.setPortfolio(props.portfolio.withNewLegs(newLegs));\n  };\n  const deleteLeg = (legIndex: number) => () => {\n    if (props.portfolio.legs.length === 1) {\n      return;\n    }\n    props.setPortfolio(\n      props.portfolio.withNewLegs(\n        props.portfolio.legs.filter((_, i) => i !== legIndex)\n      )\n    );\n  };\n  const addLeg = () => {\n    const newLegs = _.clone(props.portfolio.legs);\n    newLegs.push({\n      ...props.portfolio.legs[props.portfolio.legs.length - 1],\n    });\n    props.setPortfolio(props.portfolio.withNewLegs(newLegs));\n  };\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      anchor=\"left\"\n    >\n      <div className={classes.toolbar} />\n\n      <Grid container className={classes.drawerTypography} spacing={2}>\n        <Grid item xs={6}>\n          <BlurInput\n            label={\"Stock Ticker\"}\n            fullWidth\n            variant=\"outlined\"\n            value={props.symbol}\n            setValue={props.setSymbol}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <BlurInput\n            label=\"Stock Price\"\n            fullWidth\n            variant=\"outlined\"\n            type=\"number\"\n            value={props.portfolio.entryStockPrice.toFixed(2)}\n            setValue={(newStockPrice: string) => {\n              props.setPortfolio(\n                new Portfolio(\n                  props.portfolio.legs,\n                  props.portfolio.entryTime,\n                  parseFloat(newStockPrice)\n                )\n              );\n            }}\n          />\n        </Grid>\n      </Grid>\n\n      <Typography className={classes.drawerTypographySmall} />\n      <Divider />\n\n      <Typography variant=\"h6\" className={classes.drawerTypography}>\n        Options Legs\n      </Typography>\n      {props.portfolio.legs.map((leg: Leg, i: number) => (\n        <OptionLegCard\n          entryStockPrice={props.portfolio.entryStockPrice}\n          entryTime={props.portfolio.entryTime}\n          r={props.r}\n          leg={leg}\n          setLeg={setLeg(i)}\n          deleteLeg={deleteLeg(i)}\n        />\n      ))}\n\n      <Button\n        variant=\"text\"\n        startIcon={<AddIcon />}\n        className={classes.addIconButton}\n        onClick={addLeg}\n      >\n        Add Leg\n      </Button>\n\n      <PortfolioSummary r={props.r} portfolio={props.portfolio} />\n\n      <Typography className={classes.drawerTypographySmall} />\n      <Divider />\n\n      <Typography variant=\"h6\" className={classes.drawerTypography}>\n        Variables\n      </Typography>\n      <form className={classes.drawerTypography} noValidate autoComplete=\"off\">\n        <BlurInput\n          label={\"r (risk-free rate)\"}\n          fullWidth\n          variant=\"outlined\"\n          type=\"number\"\n          value={`${props.r}`}\n          setValue={(r) => props.setR(parseFloat(r))}\n        />\n      </form>\n    </Drawer>\n  );\n}\n","import { AppBar, Icon, IconButton, Toolbar } from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LooksIcon from \"@material-ui/icons/Looks\";\nimport React from \"react\";\n\nconst navbarStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  titleLink: {\n    color: theme.palette.primary.contrastText,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport function Navbar() {\n  const classes = navbarStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n        <Icon className={classes.menuButton}>\n          <Link\n            href={process.env.PUBLIC_URL}\n            underline=\"none\"\n            className={classes.titleLink}\n          >\n            <LooksIcon />\n          </Link>\n        </Icon>\n        <Link\n          href=\"/\"\n          underline=\"none\"\n          variant=\"h6\"\n          className={classes.titleLink}\n        >\n          Rainbow Options Calculator\n        </Link>\n        <div style={{ flexGrow: 1 }} />\n        <div>\n          <IconButton\n            aria-label=\"link to github\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            color=\"inherit\"\n          >\n            <Link\n              href=\"https://github.com/advait/rainbow-options\"\n              className={classes.titleLink}\n              target=\"_blank\"\n            >\n              <GitHubIcon />\n            </Link>\n          </IconButton>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { defaultPortfolio, Portfolio } from \"./portfolio\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport \"typeface-roboto\";\nimport { Contours } from \"./contours\";\nimport moment from \"moment\";\nimport { drawerWidth, LeftDrawer } from \"./left-drawer\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Navbar } from \"./navbar\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  content: {\n    top: 0,\n    right: 0,\n    width: `calc(100% - ${drawerWidth}px)`,\n    height: \"100%\",\n    display: \"flex\",\n    position: \"fixed\",\n    overflowY: \"hidden\",\n    padding: 0,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  // Parse portfolio from browser hash\n  const history = useHistory();\n  const urlParams: any = useParams();\n  const setPortfolio = (portfolio: Portfolio, replace: boolean = false) => {\n    const url = `/p/${portfolio.toURLSlug()}`;\n    if (replace) {\n      history.replace(url);\n    } else {\n      history.push(url);\n    }\n  };\n  let portfolio;\n  try {\n    portfolio = Portfolio.fromURLSlug(urlParams.p);\n  } catch (e) {\n    console.log(\n      \"Failed to deserialize portfolio form hash, falling back to default portfolio.\"\n    );\n    portfolio = defaultPortfolio;\n    setPortfolio(portfolio, true);\n  }\n\n  const [r, setR] = useState(0.007);\n  const [mouseST, setMouseST] = useState({\n    s: 0,\n    t: moment(),\n    mouseX: 0,\n    mouseY: 0,\n    show: false,\n  });\n  const [symbol, setSymbol] = useState(\"TEST\");\n  // TODO(advait): Allow us to modify the stock/time window via state\n  const timeWindow = {\n    t0: portfolio.entryTime,\n    tFinal: portfolio.getEarliestExpiration(),\n  };\n  const stockPriceRange = 2 * portfolio.entryStockPrice;\n  const stockPriceWindow = {\n    yFinal: Math.max(0, portfolio.entryStockPrice - stockPriceRange),\n    y0: portfolio.entryStockPrice + stockPriceRange,\n  };\n\n  const portfolioValue = portfolio.netValuePoint(mouseST.s, mouseST.t, r);\n\n  return (\n    <div className={classes.root}>\n      <Navbar />\n      <LeftDrawer\n        portfolio={portfolio}\n        setPortfolio={setPortfolio}\n        r={r}\n        setR={setR}\n        symbol={symbol}\n        setSymbol={setSymbol}\n      />\n      <main className={classes.content}>\n        <Contours\n          portfolio={portfolio}\n          portfolioValue={portfolioValue}\n          r={r}\n          timeWindow={timeWindow}\n          stockPriceWindow={stockPriceWindow}\n          st={mouseST}\n          setST={setMouseST}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { wrapReact } from \"./graphql\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  wrapReact(\n    <HashRouter>\n      <Switch>\n        <Route path=\"/p/:p\">\n          <App />\n        </Route>\n        <Route>\n          <App />\n        </Route>\n      </Switch>\n    </HashRouter>\n  ),\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}