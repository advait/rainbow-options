{"version":3,"sources":["portfolio.ts","blackscholes.js","contours.js","option-leg-card.tsx","left-drawer.tsx","graphql.tsx","select-leg-modal.tsx","App.js","index.js"],"names":["PutCall","moment","require","portfolio","legs","quantity","putCall","CALL","k","t","add","iv","entryTime","getEarliestExpiration","arr","map","l","sort","a","b","isBefore","portfolioEntryCost","entryStockPrice","r","blackscholes","normalCdf","x","Math","abs","probability","exp","euroCall","s","sigma","max","d1","log","pow","sqrt","d2","euroPut","gpu","GPU","legGrossValueAtPoint","leg","legT","diff","PUT","Error","portfolioGrossValuePoint","_","sum","value","portfolioValue","widthPx","heightPx","t0","tFinal","y0","yFinal","performance","mark","x0","xFinal","entryCost","kernel","createKernel","serializedPortfolio","y","floor","this","thread","price","legsLength","totalValue","i","type","summedResults","setOutput","render","ret","push","length","forEach","serializePortfolio","destroy","minValue","Infinity","pctGain","v","measure","addFunction","contoursStyles","makeStyles","theme","outerContainer","width","height","toolbar","mixins","contoursInnerContainer","position","d3Container","zIndex","svg","Contours","props","classes","className","Toolbar","id","GainsTooltip","st","D3Contours","d3ContainerRef","React","createRef","stockPriceWindow","timeWindow","e","show","node","target","parentElement","bounds","getBoundingClientRect","clientX","left","clientY","top","tScale","invert","yScale","setST","mouseX","mouseY","initD3","updateD3","resizeListener","window","addEventListener","removeEventListener","nextProps","nextState","nextContext","JSON","stringify","ref","onMouseMove","updateST","onMouseOut","container","current","console","assert","offsetWidth","offsetHeight","d3","attr","domain","range","yAxis","scale","valueOf","tAxis","append","call","appendChild","clearMarks","clearMeasures","contourWidth","contourHeight","computedPortfolioValue","contours","size","getEntriesByType","contourPath","projection","point","stream","select","selectAll","data","join","d","Component","style","display","hidden","backgroundColor","padding","borderRadius","transform","toFixed","optionLegStyles","card","marginLeft","spacing","marginRight","marginTop","marginBottom","overflow","cardHeader","cursor","expand","transition","transitions","create","duration","shortest","expandOpen","contentRow","alignItems","justifyContent","bottomMargin","largeButtonGroup","flexGrow","flexShrink","largeButton","paddingLeft","paddingRight","smallButtonGroup","smallButton","margin","minWidth","descriptionValueParent","flexDirection","description","fontSize","color","grey","marginTOp","orangeLong","palette","getContrastText","deepOrange","orangeShort","purpleLong","deepPurple","purpleShort","OptionLegCard","useState","expanded","setExpanded","cond","test","und","other","undefined","quantityStr","q","putCallStr","pc","longShortStr","avatarStr","strikeStr","exprStr","format","callButtonClass","putButtonClass","setExpiration","delta","setLeg","clone","setQuantity","newQuantity","setStrike","setPutCall","setIV","Card","elevation","CardHeader","avatar","Tooltip","title","Avatar","clsx","subheader","action","IconButton","onClick","Collapse","in","timeout","Divider","Box","ButtonGroup","orientation","variant","Button","edge","deleteLeg","Fragment","portfolioSummaryStyles","paddingTop","flexBasis","descriptionValueParentShrink","textCenter","textAlign","PortfolioSummary","chain","drawerStyles","drawer","overflowX","drawerPaper","drawerTypography","drawerTypographySmall","addIconButton","alignSelf","LeftDrawer","legIndex","newPortfolio","cloneDeep","filter","setPortfolio","Drawer","paper","anchor","Grid","item","xs","TextField","label","fullWidth","symbol","onChange","setSymbol","setEntryStockPrice","parseFloat","Typography","newLeg","startIcon","noValidate","autoComplete","setR","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","legOverviewBox","expiration","strike","gql","orange","purple","borderBottomColor","useStyles","root","appBar","titleLink","menuButton","content","right","overflowY","App","tree","Portfolio","mouseST","setMouseST","stockPriceRange","entryValue","endingValue","netValue","portfolioNetValuePoint","AppBar","Icon","Link","href","underline","aria-label","aria-controls","aria-haspopup","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9981e753.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { Moment } from \"moment\";\nimport * as blackscholes from \"./blackscholes\";\n\nconst moment = require(\"moment\");\n\n/**\n * Represents an options portfolio consisting of multiple legs.\n */\nexport type Portfolio = {\n  legs: Leg[];\n  entryTime: Moment;\n};\n\n/**\n * Represents a single leg/option within an options portfolio.\n */\nexport type Leg = {\n  quantity: number;\n  putCall: PutCall;\n  k: number;\n  t: Moment;\n  iv: number;\n};\n\nexport enum PutCall {\n  PUT,\n  CALL,\n}\n\n/**\n * @type Portfolio\n */\nexport const portfolio: Portfolio = {\n  legs: [\n    {\n      quantity: 1,\n      putCall: PutCall.CALL,\n      k: 7,\n      t: moment().add(182, \"days\"),\n      iv: 1.2,\n    },\n  ],\n  entryTime: moment(),\n};\n\n/**\n * Returns the expiration date of the earliest-expiring option in the portfolio.\n */\nexport function getEarliestExpiration(portfolio: Portfolio): Moment {\n  const arr = portfolio.legs.map((l) => l.t);\n  arr.sort((a, b) => (a.isBefore(b) ? -1 : 1));\n  return arr[0];\n}\n\nexport function legToString(leg: Leg): string {\n  return `${leg.quantity} ${leg.putCall} ${leg.k} ${leg.t}`;\n}\n\nexport function portfolioEntryCost(\n  entryStockPrice: number,\n  portfolio: Portfolio,\n  r: number\n): number {\n  return blackscholes.portfolioGrossValuePoint(\n    entryStockPrice,\n    portfolio.entryTime,\n    portfolio,\n    r\n  );\n}\n\n/**\n * Returns the overall portfolio IV as a weighted average of each leg's IV where the weight is the absolute value of\n * the quantity.\n * @param portfolio\n */\nexport function weightedIV(portfolio: Portfolio): number {\n  const sum = _.chain(portfolio.legs)\n    .map((l) => Math.abs(l.quantity) * l.iv)\n    .sum()\n    .value();\n  const totalLegs = _.chain(portfolio.legs)\n    .map((l) => Math.abs(l.quantity))\n    .sum()\n    .value();\n  return sum / totalLegs;\n}\n","import { GPU } from \"gpu.js\";\nimport { PutCall, portfolioEntryCost } from \"./portfolio\";\nimport moment from \"moment\";\nimport * as _ from \"lodash\";\n\n/**\n * The CDF of the normal distribution with mean = 0 and stdev = 1.\n * @param x {number} the value to look up.\n * @returns {number} the CDF value.\n */\nexport function normalCdf(x) {\n  // HASTINGS.  MAX ERROR = .000001\n  const t = 1 / (1 + 0.2316419 * Math.abs(x));\n  const d = 0.3989423 * Math.exp((-x * x) / 2);\n  const probability =\n    d *\n    t *\n    (0.3193815 +\n      t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));\n  if (x > 0) {\n    return 1 - probability;\n  } else {\n    return probability;\n  }\n}\n\n/**\n * Returns the value of a European call option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroCall(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, s - k);\n  } else if (t < 0) {\n    return 0;\n  }\n  const d1 =\n    (Math.log(s / k) + (r + Math.pow(sigma, 2) / 2) * t) /\n    (sigma * Math.sqrt(t));\n  const d2 = d1 - sigma * Math.sqrt(t);\n  return s * normalCdf(d1) - k * Math.exp(-r * t) * normalCdf(d2);\n}\n\n/**\n * Returns the value of a European put option.\n * @param s {Number} Price of the stock\n * @param k {Number} Strike price of the option\n * @param t {Number} Time to maturity (in years)\n * @param r {Number} Risk-free interest rate (in years)\n * @param sigma {Number} Volatility (annual one-std volatility divided by s)\n * @returns {number} the value of the call option.\n */\nexport function euroPut(s, k, t, r, sigma) {\n  if (t === 0) {\n    return Math.max(0, k - s);\n  } else if (t < 0) {\n    return 0;\n  }\n  const d1 =\n    (Math.log(s / k) + (r + Math.pow(sigma, 2) / 2) * t) /\n    (sigma * Math.sqrt(t));\n  const d2 = d1 - sigma * Math.sqrt(t);\n  return k * Math.exp(-r * t) * normalCdf(-d2) - s * normalCdf(-d1);\n}\n\nconst gpu = new GPU();\ngpu.addFunction(normalCdf);\ngpu.addFunction(euroCall);\ngpu.addFunction(euroPut);\n\n/**\n * Returns the entry cost of a single leg (ignoring quantity) at the given stock price and time.\n * @param s {number} Stock price\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param leg {Leg} the leg to measure\n * @param r {number} risk free rate\n * @returns {number} gross value of the portfolio\n */\nexport function legGrossValueAtPoint(s, t, leg, r) {\n  if (leg.putCall === PutCall.CALL) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return euroCall(s, leg.k, legT, r, leg.iv);\n  } else if (leg.putCall === PutCall.PUT) {\n    const legT = leg.t.diff(t, \"years\", true);\n    return euroPut(s, leg.k, legT, r, leg.iv);\n  } else {\n    throw Error(\"Invalid type: \" + leg.putCall);\n  }\n}\n\n/**\n * Returns the total value of the portfolio at a given stock price and time.\n * @param s {number} Stock price\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param portfolio {Portfolio} the portfolio to measure\n * @param r {number} risk free rate\n * @returns {number} gross value of the portfolio\n */\nexport function portfolioGrossValuePoint(s, t, portfolio, r) {\n  return _.chain(portfolio.legs)\n    .map((leg) => leg.quantity * legGrossValueAtPoint(s, t, leg, r))\n    .sum()\n    .value();\n}\n\n/**\n * Returns the value of the portfolio at a given stock price and time.\n * @param entryStockPrice {number} The stock price when the portfolio was purchased\n * @param s {number} The stock price that we are using to lookup the portfolio value\n * @param t {moment.Moment} Point in time to measure the portfolio value\n * @param portfolio {Portfolio} the portfolio to measure\n * @param r {number} risk free rate\n * @returns {{endingValue: number, netValue: number, pctGain, number}} value of the portfolio\n */\nexport function portfolioNetValuePoint(entryStockPrice, s, t, portfolio, r) {\n  const entryValue = portfolioGrossValuePoint(\n    entryStockPrice,\n    portfolio.entryTime,\n    portfolio,\n    r\n  );\n  const endingValue = portfolioGrossValuePoint(s, t, portfolio, r);\n\n  const netValue = endingValue - entryValue;\n  const pctGain = netValue / entryValue;\n  return {\n    endingValue,\n    netValue,\n    pctGain,\n  };\n}\n\n/**\n * Serializes a portfolio into an array that can be read by the GPU.\n * @param portfolio {Portfolio}\n * @param portfolioEntryCost {number}\n * @returns number[]\n */\nfunction serializePortfolio(portfolio, portfolioEntryCost) {\n  const ret = [];\n  // First push portfolio metadata\n  ret.push(portfolioEntryCost);\n  ret.push(portfolio.legs.length);\n  // Next push each leg data sequentially\n  portfolio.legs.forEach((leg) => {\n    ret.push(leg.quantity);\n    ret.push(leg.putCall === PutCall.PUT ? 0 : 1);\n    ret.push(leg.k);\n    ret.push(leg.t.diff(portfolio.entryTime, \"years\", true));\n    ret.push(leg.iv);\n  });\n  return ret;\n}\n\n/**\n * @param widthPx {number}\n * @param heightPx {number}\n * @param t0 {number}\n * @param tFinal {number}\n * @param y0 {number}\n * @param yFinal {number}\n * @param entryStockPrice {number}\n * @param portfolio {Portfolio}\n * @param r {number}\n * @returns {{minValue: number, pctGain: number[]}}\n */\nexport function portfolioValue(\n  widthPx,\n  heightPx,\n  t0,\n  tFinal,\n  y0,\n  yFinal,\n  entryStockPrice,\n  portfolio,\n  r\n) {\n  performance.mark(\"portfolioValueStart\");\n\n  // Switch from moment dates to number dates in terms of fractions of years\n  const x0 = t0.diff(portfolio.entryTime, \"years\", true);\n  const xFinal = tFinal.diff(portfolio.entryTime, \"years\", true);\n\n  const entryCost = portfolioEntryCost(entryStockPrice, portfolio, r);\n\n  // Compute the net value (value - entry cost) for the whole options portfolio on the gpu\n  performance.mark(\"gpuLegStart\");\n  let kernel = gpu.createKernel(function (\n    widthPx,\n    heightPx,\n    x0,\n    xFinal,\n    y0,\n    yFinal,\n    serializedPortfolio,\n    r\n  ) {\n    const y = Math.floor(this.thread.x / widthPx);\n    const x = this.thread.x % widthPx;\n    let t0 = (x / widthPx) * (xFinal - x0) + x0;\n    let price = (y / heightPx) * (yFinal - y0) + y0;\n    const entryCost = serializedPortfolio[0];\n    const legsLength = serializedPortfolio[1];\n    const metadataPerLeg = 5;\n    let totalValue = 0;\n    for (let i = 0; i < legsLength; i++) {\n      const quantity = serializedPortfolio[i * metadataPerLeg + 2];\n      const type = serializedPortfolio[i * metadataPerLeg + 3];\n      const k = serializedPortfolio[i * metadataPerLeg + 4];\n      const legT = serializedPortfolio[i * metadataPerLeg + 5];\n      const iv = serializedPortfolio[i * metadataPerLeg + 6];\n      if (type === 0) {\n        totalValue += quantity * euroPut(price, k, legT - t0, r, iv);\n      } else {\n        totalValue += quantity * euroCall(price, k, legT - t0, r, iv);\n      }\n    }\n    return totalValue - entryCost;\n  });\n  let render = kernel.setOutput([widthPx * heightPx]);\n  const serializedPortfolio = serializePortfolio(portfolio, entryCost);\n  const summedResults = render(\n    widthPx,\n    heightPx,\n    x0,\n    xFinal,\n    y0,\n    yFinal,\n    serializedPortfolio,\n    r\n  );\n  kernel.destroy();\n\n  // Compute min value so we can normalize based on pct gain\n  let minValue = Infinity;\n  for (let i = 0; i < summedResults.length; i++) {\n    const value = summedResults[i];\n    if (value < minValue) {\n      minValue = value;\n    }\n  }\n  const pctGain = summedResults.map((v) => v / -minValue); // -1 to +Inf\n  performance.measure(\"portfolioValue\", \"portfolioValueStart\");\n\n  return {\n    pctGain,\n    minValue,\n  };\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { portfolioValue } from \"./blackscholes\";\nimport moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport * as _ from \"lodash\";\n\nconst contoursStyles = makeStyles((theme) => ({\n  outerContainer: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  toolbar: theme.mixins.toolbar,\n  contoursInnerContainer: {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n  d3Container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 1,\n  },\n  svg: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 2,\n  },\n}));\n\nexport function Contours(props) {\n  const classes = contoursStyles();\n  return (\n    <div className={classes.outerContainer}>\n      <Toolbar className={classes.toolbar} />\n      <div\n        id=\"contoursInnerContainer\"\n        className={classes.contoursInnerContainer}\n      >\n        <D3Contours {...props} className={classes.d3Container} />\n        <GainsTooltip\n          st={props.st}\n          pctGain={props.portfolioValue.pctGain}\n          className={classes.svg}\n        />\n      </div>\n    </div>\n  );\n}\n\nclass D3Contours extends React.Component {\n  constructor(props) {\n    super(props);\n    this.d3ContainerRef = React.createRef();\n    this.stockPriceWindow = this.props.stockPriceWindow;\n    this.timeWindow = this.props.timeWindow;\n    this.entryStockPrice = this.props.entryStockPrice;\n    this.portfolio = this.props.portfolio;\n    this.r = this.props.r;\n  }\n\n  /**\n   * Handle a mouse move/out event, update the S and T positions based on the coordinates of the mouse.\n   * @param e {MouseEvent}\n   * @param show {boolean} whether to show the gains tooltip (is the mouse over the contour graph?)\n   */\n  updateST(e, show) {\n    let node = e.target;\n    while (node.id !== \"contoursInnerContainer\") {\n      node = node.parentElement;\n      if (!node) {\n        throw new Error(\"Could not find contoursInnerContainer\");\n      }\n    }\n    const bounds = node.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const t = this.tScale.invert(x);\n    const s = this.yScale.invert(y);\n    this.props.setST({\n      s,\n      t: moment(t),\n      mouseX: e.clientX,\n      mouseY: e.clientY,\n      show,\n    });\n  }\n\n  componentDidMount() {\n    this.initD3();\n    this.updateD3();\n\n    this.resizeListener = _.debounce(() => this.updateD3(), 10);\n    window.addEventListener(\"resize\", this.resizeListener);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeListener);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    // Major hacks to get d3 to play nicely with react's lifecycle\n    // Here, we only want to update D3 if any portfolio/options-related props have changed\n    if (\n      this.timeWindow.t0 !== nextProps.timeWindow.t0 ||\n      this.timeWindow.tFinal !== nextProps.timeWindow.tFinal ||\n      this.stockPriceWindow.y0 !== nextProps.stockPriceWindow.y0 ||\n      this.stockPriceWindow.yFinal !== nextProps.stockPriceWindow.yFinal ||\n      this.entryStockPrice !== nextProps.entryStockPrice ||\n      JSON.stringify(this.props.portfolio) !==\n        JSON.stringify(nextProps.portfolio) ||\n      this.r !== nextProps.r\n    ) {\n      // Now that we've confirmed that the props have changed, we need to manually overwrite them\n      this.timeWindow.t0 = nextProps.timeWindow.t0;\n      this.timeWindow.tFinal = nextProps.timeWindow.tFinal;\n      this.stockPriceWindow.y0 = nextProps.stockPriceWindow.y0;\n      this.stockPriceWindow.yFinal = nextProps.stockPriceWindow.yFinal;\n      this.entryStockPrice = nextProps.entryStockPrice;\n      this.portfolio = nextProps.portfolio;\n      this.r = nextProps.r;\n\n      this.updateD3();\n    }\n\n    // Always prevent react from re-rendering our DOM as d3 is responsible for managing it.\n    return false;\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.d3ContainerRef}\n        onMouseMove={(e) => this.updateST(e, true)}\n        onMouseOut={(e) => this.updateST(e, false)}\n        className={this.props.className}\n      />\n    );\n  }\n\n  initD3() {\n    const container = this.d3ContainerRef.current;\n    console.assert(container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100;\n    const height = container.offsetHeight || 100;\n\n    this.svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n\n    this.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([this.stockPriceWindow.y0, this.stockPriceWindow.yFinal])\n      .range([0, height]);\n\n    this.yAxis = d3.axisRight().scale(this.yScale);\n\n    this.tScale = this.tScale = d3\n      .scaleUtc()\n      .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n      .range([0, width]);\n\n    this.tAxis = d3.axisBottom().scale(this.tScale);\n\n    this.svg\n      .append(\"g\")\n      .attr(\"class\", \"contours\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-opacity\", 0.5);\n\n    this.svg\n      .append(\"g\")\n      .attr(\"class\", \"t-axis\")\n      .attr(\"transform\", `translate(0,${this.yScale(556)})`)\n      .call(this.tAxis);\n    this.svg.append(\"g\").attr(\"class\", \"y-axis\").call(this.yAxis);\n\n    container.appendChild(this.svg.node());\n  }\n\n  updateD3() {\n    performance.clearMarks();\n    performance.clearMeasures();\n\n    const container = this.d3ContainerRef.current;\n    console.assert(container, \"No canvas container\");\n\n    const width = container.offsetWidth || 100;\n    const height = container.offsetHeight || 100;\n\n    this.yScale\n      .domain([this.stockPriceWindow.y0, this.stockPriceWindow.yFinal])\n      .range([0, height]);\n\n    this.tScale\n      .domain([this.timeWindow.t0.valueOf(), this.timeWindow.tFinal.valueOf()])\n      .range([0, width]);\n\n    // Rather than compute the price for every pixel (resource intensive), we first scale down\n    // and then scale up the d3 contour projection below.\n    const scaleDownFactor = 4;\n    const contourWidth = Math.floor(width / scaleDownFactor);\n    const contourHeight = Math.floor(height / scaleDownFactor);\n    const computedPortfolioValue = portfolioValue(\n      contourWidth,\n      contourHeight,\n      this.timeWindow.t0,\n      this.timeWindow.tFinal,\n      this.stockPriceWindow.y0,\n      this.stockPriceWindow.yFinal,\n      this.entryStockPrice,\n      this.portfolio,\n      this.r\n    );\n\n    performance.mark(\"d3ContoursStart\");\n    const contours = d3.contours().size([contourWidth, contourHeight])(\n      computedPortfolioValue.pctGain\n    );\n    performance.mark(\"d3ContoursEnd\");\n    performance.measure(\"d3Contours\", \"d3ContoursStart\", \"d3ContoursEnd\");\n    console.log(performance.getEntriesByType(\"measure\"));\n\n    const contourPath = d3.geoPath().projection(\n      d3.geoTransform({\n        point: function (x, y) {\n          this.stream.point(\n            (x / contourWidth) * width,\n            (y / contourWidth) * width\n          );\n        },\n      })\n    );\n\n    // Contour thresholds (pct gains) and the corresponding colors\n    const interpolatePctGain = (pctGain) => {\n      if (pctGain <= 0) {\n        return d3.scaleLinear().domain([-1, 0]).range([0, 0.5])(pctGain);\n      } else {\n        return d3.scalePow().domain([0, 3]).range([0.5, 1])(pctGain);\n      }\n    };\n\n    this.svg.attr(\"viewBox\", [0, 0, width, height]);\n\n    this.svg\n      .select(\".contours\")\n      .selectAll(\"path\")\n      .data(contours)\n      .join(\"path\")\n      .attr(\"fill\", (d) => d3.interpolateSpectral(interpolatePctGain(d.value)))\n      .attr(\"d\", contourPath);\n\n    this.svg\n      .select(\".t-axis\")\n      .attr(\"transform\", `translate(0,${this.yScale(this.entryStockPrice)})`)\n      .call(this.tAxis);\n\n    this.svg.select(\".y-axis\").call(this.yAxis);\n  }\n}\n\nfunction GainsTooltip(props) {\n  const display = props.hidden ? \"hidden\" : \"inline\";\n  const style = {\n    display,\n    position: \"fixed\",\n    top: props.st.mouseY + 20,\n    left: props.st.mouseX,\n    zIndex: 3,\n    backgroundColor: \"#33333344\",\n    padding: \"6px\",\n    borderRadius: \"4px\",\n    transform: \"translate(-40%, -200%)\",\n  };\n\n  const returns = (pctGain) => {\n    if (pctGain <= 0) {\n      return `${(pctGain * 100).toFixed(2)}%`;\n    } else if (pctGain < 1) {\n      return `+${(pctGain * 100).toFixed(2)}%`;\n    } else {\n      return `${pctGain.toFixed(2)}x`;\n    }\n  };\n\n  return (\n    <div className=\"gains-tooltip\" style={style}>\n      {returns(props.pctGain)}\n    </div>\n  );\n}\n","import {\n  Avatar,\n  Box,\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  Collapse,\n  Theme,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { deepOrange, deepPurple, grey } from \"@material-ui/core/colors\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport clsx from \"clsx\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { legGrossValueAtPoint } from \"./blackscholes\";\nimport {\n  Leg,\n  Portfolio,\n  portfolioEntryCost,\n  PutCall,\n  weightedIV,\n} from \"./portfolio\";\n\nexport type OptionLegCardProps = {\n  entryStockPrice: number;\n  entryTime: moment.Moment;\n  r: number;\n  leg: Leg;\n  setLeg: (leg: Leg) => void;\n  deleteLeg: () => void;\n};\n\n// @ts-ignore\nconst optionLegStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  largeButtonGroup: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  largeButton: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  smallButtonGroup: {\n    marginRight: theme.spacing(2),\n  },\n  smallButton: {\n    padding: 0,\n    margin: 0,\n    minWidth: \"24px\",\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"column\",\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTOp: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {\n    fontSize: \"18px\",\n  },\n  orangeLong: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  orangeShort: {\n    color: theme.palette.getContrastText(deepOrange[100]),\n    backgroundColor: deepOrange[100],\n  },\n  purpleLong: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n  purpleShort: {\n    color: theme.palette.getContrastText(deepPurple[100]),\n    backgroundColor: deepPurple[100],\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[500]),\n    backgroundColor: grey[500],\n  },\n}));\n\nexport function OptionLegCard(props: OptionLegCardProps) {\n  const classes = optionLegStyles();\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpanded = () => setExpanded(!expanded);\n\n  function cond<T>(\n    test: T | undefined,\n    und: string,\n    other: (t: T) => string\n  ): string {\n    if (test === undefined) {\n      return und;\n    } else {\n      return other(test);\n    }\n  }\n\n  const quantityStr = cond(props.leg.quantity, \"-\", (q) =>\n    q > 0 ? `+${q}` : `${q}`\n  );\n  const putCallStr = cond(props.leg.putCall, \"?\", (pc) =>\n    pc === PutCall.CALL ? \"Call\" : \"Put\"\n  );\n  const longShortStr = cond(props.leg.quantity, \"Long\", (q) =>\n    q < 0 ? \"Short\" : \"Long\"\n  );\n  const avatarStr = `${putCallStr[0]}${longShortStr[0]}`;\n  const strikeStr = cond(props.leg.k, \"?\", (k) => `$${k}`);\n  const exprStr = cond(\n    props.leg.t,\n    \"?\",\n    (t) => `${t.format(\"MMM DD, YYYY\")} (${t.diff(moment(), \"days\")} days)`\n  );\n  let callButtonClass = \"\";\n  if (props.leg.putCall === PutCall.CALL) {\n    callButtonClass =\n      props.leg.quantity && props.leg.quantity < 0\n        ? classes.orangeShort\n        : classes.orangeLong;\n  }\n  let putButtonClass = \"\";\n  if (props.leg.putCall === PutCall.PUT) {\n    putButtonClass =\n      props.leg.quantity && props.leg.quantity < 0\n        ? classes.purpleShort\n        : classes.purpleLong;\n  }\n\n  const setExpiration = (delta: moment.Duration) => () => {\n    props.setLeg({ ...props.leg, t: props.leg.t.clone().add(delta) });\n  };\n  const setQuantity = (delta: number) => () => {\n    let newQuantity = props.leg.quantity + delta;\n    if (newQuantity === 0) {\n      newQuantity += delta;\n    }\n    props.setLeg({ ...props.leg, quantity: newQuantity });\n  };\n  const setStrike = (delta: number) => () => {\n    // TODO(advait): Read the next k from the option chain instead of incrementing\n    props.setLeg({ ...props.leg, k: props.leg.k + delta });\n  };\n  const setPutCall = (putCall: PutCall) => () => {\n    props.setLeg({ ...props.leg, putCall });\n  };\n  const setIV = (delta: number) => () => {\n    props.setLeg({ ...props.leg, iv: props.leg.iv + delta });\n  };\n\n  return (\n    <Card elevation={1} className={classes.card}>\n      <CardHeader\n        avatar={\n          <Tooltip title={`${longShortStr} ${putCallStr}`}>\n            <Avatar className={clsx(putButtonClass, callButtonClass)}>\n              {avatarStr}\n            </Avatar>\n          </Tooltip>\n        }\n        title={`${quantityStr}x @ ${strikeStr} ${putCallStr}`}\n        subheader={`${exprStr}`}\n        action={\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        }\n        onClick={toggleExpanded}\n        className={classes.cardHeader}\n      />\n\n      <Collapse in={expanded} timeout=\"auto\">\n        <Divider className={classes.bottomMargin} />\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"horizontal\"\n            variant=\"outlined\"\n            className={classes.largeButtonGroup}\n          >\n            <Button\n              className={clsx(classes.largeButton, callButtonClass)}\n              onClick={setPutCall(PutCall.CALL)}\n            >\n              {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"}{\" \"}\n              Call\n            </Button>\n            <Button\n              className={clsx(classes.largeButton, putButtonClass)}\n              onClick={setPutCall(PutCall.PUT)}\n            >\n              {props.leg.quantity && props.leg.quantity < 0 ? \"Short\" : \"Long\"}{\" \"}\n              Put\n            </Button>\n          </ButtonGroup>\n          <IconButton edge=\"end\">\n            <DeleteIcon onClick={props.deleteLeg} />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setExpiration(moment.duration(1, \"month\"))}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setExpiration(moment.duration(-1, \"month\"))}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Expiration</span>\n            <span className={classes.value}>\n              {props.leg.t ? (\n                <React.Fragment>\n                  {props.leg.t.format(\"MMM DD, YY\")} (\n                  {props.leg.t.diff(moment(), \"days\")} days)\n                </React.Fragment>\n              ) : (\n                \"Unknown\"\n              )}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setQuantity(1)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setQuantity(-1)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div\n            className={classes.descriptionValueParent}\n            style={{ width: \"65px\" }}\n          >\n            <span className={classes.description}>Quantity</span>\n            <span className={classes.value}>\n              {props.leg.quantity ? props.leg.quantity : \"?\"}\n            </span>\n          </div>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setStrike(1)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setStrike(-1)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Strike Price</span>\n            <span className={classes.value}>\n              ${props.leg.k ? props.leg.k.toFixed(2) : \"?\"}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n\n        <Box flexDirection=\"row\" className={classes.contentRow}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            variant=\"outlined\"\n            className={classes.smallButtonGroup}\n          >\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setIV(0.05)}\n            >\n              +\n            </Button>\n            <Button\n              size=\"small\"\n              className={classes.smallButton}\n              onClick={setIV(-0.05)}\n            >\n              -\n            </Button>\n          </ButtonGroup>\n          <div\n            className={classes.descriptionValueParent}\n            style={{ width: \"60px\" }}\n          >\n            <span className={classes.description}>Unit Price</span>\n            <span className={classes.value}>\n              $\n              {legGrossValueAtPoint(\n                props.entryStockPrice,\n                props.entryTime,\n                props.leg,\n                props.r\n              ).toFixed(2)}\n            </span>\n          </div>\n          <div className={classes.descriptionValueParent}>\n            <span className={classes.description}>Implied Volatility</span>\n            <span className={classes.value}>\n              {props.leg.iv ? props.leg.iv.toFixed(2) : \"?\"}\n            </span>\n          </div>\n          <IconButton edge=\"end\">\n            <EditIcon />\n          </IconButton>\n        </Box>\n      </Collapse>\n    </Card>\n  );\n}\n\nexport interface PortfolioSummaryProps {\n  entryStockPrice: number;\n  r: number;\n  portfolio: Portfolio;\n}\n\n// @ts-ignore\nconst portfolioSummaryStyles = makeStyles((theme: Theme) => ({\n  card: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    paddingTop: theme.spacing(2),\n    overflow: \"visible\",\n  },\n  cardHeader: {\n    cursor: \"pointer\",\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  contentRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    justifyContent: \"space-between\",\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2),\n  },\n  descriptionValueParent: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n  },\n  descriptionValueParentShrink: {\n    display: \"flex\",\n    flexShrink: 1,\n    flexBasis: \"0px\",\n    flexDirection: \"column\",\n    \"& :last-child\": {\n      fontSize: \"0.875rem\",\n    },\n  },\n  description: {\n    fontSize: \"12px\",\n    color: grey[500],\n    marginTop: \"-2px\",\n    marginBottom: \"3px\",\n  },\n  value: {},\n  textCenter: {\n    textAlign: \"center\",\n  },\n}));\n\nexport function PortfolioSummary(props: PortfolioSummaryProps) {\n  const classes = portfolioSummaryStyles();\n\n  return (\n    <Card className={classes.card}>\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Net Price</span>\n          <span className={classes.value}>\n            $\n            {portfolioEntryCost(\n              props.entryStockPrice,\n              props.portfolio,\n              props.r\n            ).toFixed(2)}\n          </span>\n        </div>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Weighted IV</span>\n          <span className={classes.value}>\n            {weightedIV(props.portfolio).toFixed(2)}\n          </span>\n        </div>\n      </Box>\n\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Max Gain</span>\n          <span className={classes.value}>38.39 (32x)</span>\n        </div>\n        <div className={classes.descriptionValueParent}>\n          <span className={classes.description}>Max Loss</span>\n          <span className={classes.value}>-$1.39 (-100%)</span>\n        </div>\n      </Box>\n\n      <Divider className={classes.bottomMargin} />\n\n      <Box flexDirection=\"row\" className={classes.contentRow}>\n        <Tooltip title=\"Delta - how much the option value changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x394;\n            </span>\n            <span className={classes.value}>0.13</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Delta% - how much the option value changes (as a % of max loss) for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x394;%\n            </span>\n            <span className={classes.value}>0.13</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Gamma - how much Delta changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x194;\n            </span>\n            <span className={classes.value}>0.13</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Gamma% - how much Delta% changes for every dollar increase in stock price\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={classes.description}>&#x194;%</span>\n            <span className={classes.value}>22%</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Theta - how much the option value changes every day due to time decay\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x3F4;\n            </span>\n            <span className={classes.value}>-3.3</span>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Theta% - how much the option value changes (as a % of max loss) every day due to time decay\">\n          <div className={classes.descriptionValueParentShrink}>\n            <span className={clsx(classes.description, classes.textCenter)}>\n              &#x3F4;%\n            </span>\n            <span className={classes.value}>-4.3%</span>\n          </div>\n        </Tooltip>\n      </Box>\n    </Card>\n  );\n}\n","import { Button, Drawer, Theme } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { OptionLegCard, PortfolioSummary } from \"./option-leg-card\";\nimport { Leg, Portfolio } from \"./portfolio\";\n\nexport const drawerWidth = 350;\n\n// @ts-ignore\nconst drawerStyles = makeStyles((theme: Theme) => ({\n  toolbar: theme.mixins.toolbar,\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    overflowX: \"hidden\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    overflowX: \"hidden\",\n  },\n  drawerTypography: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  drawerTypographySmall: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n  addIconButton: {\n    alignSelf: \"flex-end\",\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport type LeftDrawerProps = {\n  symbol: string;\n  setSymbol: (symbol: string) => void;\n  entryStockPrice: number;\n  setEntryStockPrice: (s: number) => void;\n  entryTime: moment.Moment;\n  r: number;\n  setR: (r: number) => void;\n  portfolio: Portfolio;\n  setPortfolio: (p: Portfolio) => void;\n};\n\nexport function LeftDrawer(props: LeftDrawerProps) {\n  const classes = drawerStyles();\n\n  const setLeg = (legIndex: number) => (newLeg: Leg) => {\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs[legIndex] = newLeg;\n    props.setPortfolio(newPortfolio);\n  };\n  const deleteLeg = (legIndex: number) => () => {\n    if (props.portfolio.legs.length === 1) {\n      return;\n    }\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs = newPortfolio.legs.filter((_, i) => i !== legIndex);\n    props.setPortfolio(newPortfolio);\n  };\n  const addLeg = () => {\n    const newPortfolio = _.cloneDeep(props.portfolio);\n    newPortfolio.legs.push({\n      ...newPortfolio.legs[newPortfolio.legs.length - 1],\n    });\n    props.setPortfolio(newPortfolio);\n  };\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      anchor=\"left\"\n    >\n      <div className={classes.toolbar} />\n\n      <Grid container className={classes.drawerTypography} spacing={2}>\n        <Grid item xs={6}>\n          <TextField\n            label={\"Stock Ticker\"}\n            fullWidth\n            variant=\"outlined\"\n            value={props.symbol}\n            onChange={(e) => props.setSymbol(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            label=\"Stock Price\"\n            fullWidth\n            variant=\"outlined\"\n            value={props.entryStockPrice.toFixed(2)}\n            type=\"number\"\n            onChange={(e) =>\n              props.setEntryStockPrice(parseFloat(e.target.value))\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Typography className={classes.drawerTypographySmall} />\n      <Divider />\n\n      <Typography variant=\"h6\" className={classes.drawerTypography}>\n        Options Legs\n      </Typography>\n      {props.portfolio.legs.map((leg: Leg, i: number) => (\n        <OptionLegCard\n          entryStockPrice={props.entryStockPrice}\n          entryTime={props.entryTime}\n          r={props.r}\n          leg={leg}\n          setLeg={setLeg(i)}\n          deleteLeg={deleteLeg(i)}\n        />\n      ))}\n\n      <Button\n        variant=\"text\"\n        startIcon={<AddIcon />}\n        className={classes.addIconButton}\n        onClick={addLeg}\n      >\n        Add Leg\n      </Button>\n\n      <PortfolioSummary\n        entryStockPrice={props.entryStockPrice}\n        r={props.r}\n        portfolio={props.portfolio}\n      />\n\n      <Typography className={classes.drawerTypographySmall} />\n      <Divider />\n\n      <Typography variant=\"h6\" className={classes.drawerTypography}>\n        Variables\n      </Typography>\n      <form className={classes.drawerTypography} noValidate autoComplete=\"off\">\n        <TextField\n          label={\"r (risk-free rate)\"}\n          fullWidth\n          variant=\"outlined\"\n          value={props.r}\n          type=\"number\"\n          onChange={(e) => props.setR(parseFloat(e.target.value))}\n        />\n      </form>\n    </Drawer>\n  );\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-boost\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:4000\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nexport function wrapReact(tree: any) {\n  return <ApolloProvider client={client}>{tree}</ApolloProvider>;\n}\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nexport function deserializeDate(s: string): moment.Moment {\n  // TODO(advait): This should really be handled transparently by Apollo\n  // Consider implementing: https://github.com/eturino/apollo-link-scalars?ts=2\n  return moment(s, DATE_FORMAT);\n}\n\nexport function serializeDate(d: moment.Moment): string {\n  return d.format(DATE_FORMAT);\n}\n","import { useQuery } from \"@apollo/react-hooks\";\nimport {\n  Box,\n  Button,\n  Card,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { deepOrange, deepPurple, grey } from \"@material-ui/core/colors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { Alert } from \"@material-ui/lab\";\nimport { gql } from \"apollo-boost\";\nimport * as _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { deserializeDate } from \"./graphql\";\nimport { Leg, PutCall } from \"./portfolio\";\n\nexport type SelectLegProps = {\n  open: boolean;\n  onClose: () => void;\n  symbol: string;\n  setSymbol: (s: string) => void;\n  currentLeg?: Leg;\n};\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\nexport function SelectLegModal(props: SelectLegProps) {\n  const [tempLeg, rawSetTempLeg] = useState(\n    (props.currentLeg || {}) as Partial<Leg>\n  );\n  const setTempLeg = (leg: Partial<Leg>) => {\n    rawSetTempLeg({ ...tempLeg, ...leg });\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\n      <DialogTitle>Edit Option Leg</DialogTitle>\n\n      <DialogContent>\n        <LegOverview\n          symbol={props.symbol}\n          leg={tempLeg}\n          setTempLeg={setTempLeg}\n        />\n      </DialogContent>\n\n      <DialogContent />\n      {tempLeg.t ? (\n        <OptionChain\n          symbol={props.symbol}\n          expirationDate={tempLeg.t}\n          setTempLeg={(leg) => setTempLeg({ ...tempLeg, ...leg })}\n        />\n      ) : (\n        \"\"\n      )}\n\n      <DialogContent />\n      <DialogActions>\n        <Button color=\"secondary\">Cancel</Button>\n        <Button color=\"primary\">OK</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nconst legOverviewStyles = makeStyles((theme: Theme) => ({\n  card: {\n    padding: theme.spacing(2),\n    width: \"780px\",\n  },\n  legOverviewBox: {\n    \"& *\": {\n      marginRight: theme.spacing(1),\n    },\n    \"& *:last\": {\n      marginRight: 0,\n    },\n  },\n  putCall: {},\n  expiration: {\n    flexGrow: 1,\n  },\n  quantity: {\n    width: \"100px\",\n  },\n  strike: {\n    width: \"120px\",\n  },\n  iv: {\n    width: \"110px\",\n  },\n  orangeLong: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n    marginRight: theme.spacing(2),\n  },\n  orangeShort: {\n    color: theme.palette.getContrastText(deepOrange[100]),\n    backgroundColor: deepOrange[100],\n    marginRight: theme.spacing(2),\n  },\n  purpleLong: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n    marginRight: theme.spacing(2),\n  },\n  purpleShort: {\n    color: theme.palette.getContrastText(deepPurple[100]),\n    backgroundColor: deepPurple[100],\n    marginRight: theme.spacing(2),\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[500]),\n    backgroundColor: grey[500],\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst LOAD_EXPIRATIONS_QUERY = gql`\n  query stock($symbol: String!) {\n    stock(symbol: $symbol) {\n      id\n      symbol\n      expirations {\n        id\n        date\n      }\n    }\n  }\n`;\n\ninterface LegOverviewProps {\n  symbol: string;\n  leg: Partial<Leg>;\n  setTempLeg: (leg: Partial<Leg>) => void;\n}\n\nfunction LegOverview(props: LegOverviewProps) {\n  const classes = legOverviewStyles();\n\n  const expirationsQuery = useQuery(LOAD_EXPIRATIONS_QUERY, {\n    variables: { symbol: props.symbol },\n  });\n\n  function PutCallView() {\n    const r = (className: string, fullName: string, shortName: string) => (\n      <Tooltip title={fullName}>\n        <Avatar className={className}>{shortName}</Avatar>\n      </Tooltip>\n    );\n    if (!props.leg.quantity || props.leg.putCall === undefined) {\n      return r(classes.grey, \"None\", \"-\");\n    } else if (props.leg.quantity < 0 && props.leg.putCall === PutCall.CALL) {\n      return r(classes.orangeShort, \"Short Call (Net Credit)\", \"CS\");\n    } else if (props.leg.quantity > 0 && props.leg.putCall === PutCall.CALL) {\n      return r(classes.orangeLong, \"Long Call (Net Debit)\", \"CL\");\n    } else if (props.leg.quantity < 0 && props.leg.putCall === PutCall.PUT) {\n      return r(classes.purpleShort, \"Short Put (Net Credit)\", \"PS\");\n    } else if (props.leg.quantity > 0 && props.leg.putCall === PutCall.PUT) {\n      return r(classes.purpleLong, \"Long Put (Net Debit)\", \"PL\");\n    } else {\n      throw new Error(\"Invalid props.leg: \" + props.leg);\n    }\n  }\n\n  return renderQuery(\n    expirationsQuery,\n    <Typography align=\"center\">\n      <CircularProgress />\n    </Typography>,\n    <Alert severity=\"error\">\n      This is an error message!\n      <br />\n      {\"\" + expirationsQuery.error}\n    </Alert>,\n    (data) => (\n      <Card className={classes.card}>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          flexDirection=\"row\"\n          className={classes.legOverviewBox}\n        >\n          <PutCallView />\n          <FormControl className={classes.expiration} variant=\"outlined\">\n            <InputLabel>Expiration Date</InputLabel>\n            <Select\n              onChange={(e) => {\n                if (e.target.value) {\n                  const newT = deserializeDate(e.target.value as string);\n                  props.setTempLeg({ ...props.leg, t: newT });\n                }\n              }}\n            >\n              {data.stock.expirations.map((exp: any) => {\n                const date = deserializeDate(exp.date);\n                return (\n                  <MenuItem\n                    key={exp.date}\n                    value={exp.date}\n                    selected={date.isSame(props.leg.t)}\n                  >\n                    {date.format(\"MMM DD, YYYY\")} ({date.diff(moment(), \"days\")}{\" \"}\n                    days)\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n          <TextField\n            label=\"Qty\"\n            type=\"number\"\n            className={classes.quantity}\n            variant=\"outlined\"\n            value={props.leg.quantity}\n            disabled={!props.leg.t}\n            onChange={(e) =>\n              props.setTempLeg({\n                ...props.leg,\n                quantity: parseInt(e.target.value),\n              })\n            }\n          />\n          <TextField\n            label=\"Strike\"\n            type=\"number\"\n            className={classes.strike}\n            variant=\"outlined\"\n            value={props.leg.k}\n            disabled={!props.leg.t}\n            onChange={(e) =>\n              props.setTempLeg({ ...props.leg, k: parseInt(e.target.value) })\n            }\n          />\n          <TextField\n            label=\"IV\"\n            type=\"number\"\n            className={classes.iv}\n            variant=\"outlined\"\n            value={props.leg.k}\n            disabled={true}\n          />\n        </Box>\n      </Card>\n    )\n  );\n}\n\ntype OptionChainProps = {\n  symbol: string;\n  expirationDate: moment.Moment;\n  setTempLeg: (leg: Partial<Leg>) => void;\n};\n\nconst LOAD_OPTION_QUOTES_QUERY = gql`\n  query OptionQuotes($symbol: String!, $date: Date!) {\n    expiration(symbol: $symbol, date: $date) {\n      id\n      quotes {\n        id\n        putCall\n        strikePrice\n        bid\n        ask\n        last\n        impliedVolatility\n      }\n    }\n  }\n`;\n\nconst optionChainStyles = makeStyles((theme: Theme) => ({\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n  grey: {\n    color: theme.palette.getContrastText(grey[300]),\n    backgroundColor: grey[300],\n    borderBottomColor: grey[300],\n  },\n}));\n\nfunction OptionChain(props: OptionChainProps) {\n  const classes = optionChainStyles();\n  const query = useQuery(LOAD_OPTION_QUOTES_QUERY, {\n    variables: { symbol: props.symbol, date: props.expirationDate },\n  });\n\n  function renderTable(data: any) {\n    const quotes: number[] = data.expiration.quotes;\n    const strikes: number[] = _.chain(quotes)\n      .map((q: any) => q.strikePrice)\n      .sortBy()\n      .sortedUniq()\n      .value();\n\n    const forStrike = (strike: number, putCall: string): number | undefined =>\n      _.chain(quotes)\n        .filter((q: any) => q.strikePrice === strike && q.putCall === putCall)\n        .head()\n        .value();\n\n    return (\n      <TableContainer style={{ maxHeight: \"50vh\" }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" className={classes.orange}>\n                Last\n              </TableCell>\n              <TableCell align=\"center\" className={classes.orange}>\n                Bid\n              </TableCell>\n              <TableCell align=\"center\" className={classes.orange}>\n                Ask\n              </TableCell>\n              <TableCell align=\"center\" className={classes.grey}>\n                Strike\n              </TableCell>\n              <TableCell align=\"center\" className={classes.purple}>\n                Bid\n              </TableCell>\n              <TableCell align=\"center\" className={classes.purple}>\n                Ask\n              </TableCell>\n              <TableCell align=\"center\" className={classes.purple}>\n                Last\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {strikes.map((strike) => {\n              const call: any = forStrike(strike, \"CALL\");\n              const put: any = forStrike(strike, \"PUT\");\n              const cell = (\n                k: number,\n                putCall: PutCall,\n                entryCost: number,\n                quantity: number\n              ) => (\n                <Button\n                  onClick={() => props.setTempLeg({ putCall, k, quantity })}\n                >\n                  {entryCost.toFixed(2)}\n                </Button>\n              );\n              return (\n                <TableRow key={strike} hover>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.CALL, call.last, 1)}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.CALL, call.bid, -1)}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.CALL, call.ask, 1)}\n                  </TableCell>\n                  <TableCell align=\"center\" className={classes.grey}>\n                    <b>{strike}</b>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.PUT, put.bid, -1)}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.PUT, put.ask, 1)}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {cell(strike, PutCall.PUT, put.last, 1)}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  return renderQuery(\n    query,\n    <Typography align=\"center\">\n      <CircularProgress />\n    </Typography>,\n    <Alert severity=\"error\">\n      Could not load option quotes, please try again.\n      <br />\n      {\"\" + query.error}\n    </Alert>,\n    renderTable\n  );\n}\n\nconst renderQuery = (\n  query: any,\n  loading: any,\n  error: any,\n  f: (data: any) => any\n) => {\n  if (query.loading) {\n    return loading;\n  } else if (query.error) {\n    return error;\n  } else {\n    return f(query.data);\n  }\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { portfolioNetValuePoint } from \"./blackscholes\";\nimport * as Portfolio from \"./portfolio\";\nimport { getEarliestExpiration } from \"./portfolio\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Icon, IconButton, Toolbar } from \"@material-ui/core\";\nimport \"typeface-roboto\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Link from \"@material-ui/core/Link\";\nimport LooksIcon from \"@material-ui/icons/Looks\";\nimport { Contours } from \"./contours\";\nimport moment from \"moment\";\nimport { drawerWidth, LeftDrawer } from \"./left-drawer\";\nimport { SelectLegModal } from \"./select-leg-modal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  titleLink: {\n    color: \"#FFF\",\n  },\n  toolbar: theme.mixins.toolbar,\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  content: {\n    top: 0,\n    right: 0,\n    width: `calc(100% - ${drawerWidth}px)`,\n    height: \"100%\",\n    display: \"flex\",\n    position: \"fixed\",\n    overflowY: \"hidden\",\n    padding: 0,\n  },\n}));\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const [r, setR] = useState(0.007);\n  const [portfolio, setPortfolio] = useState(Portfolio.portfolio);\n  const [mouseST, setMouseST] = useState({\n    s: 0,\n    t: moment(),\n    mouseX: 0,\n    mouseY: 0,\n    show: false,\n  });\n  const [symbol, setSymbol] = useState(\"TEST\");\n  const [entryStockPrice, setEntryStockPrice] = useState(5);\n  // TODO(advait): Allow us to modify the stock/time window via state\n  const timeWindow = {\n    t0: portfolio.entryTime,\n    tFinal: getEarliestExpiration(portfolio),\n  };\n  const stockPriceRange = 2 * entryStockPrice;\n  const stockPriceWindow = {\n    yFinal: Math.max(0, entryStockPrice - stockPriceRange),\n    y0: entryStockPrice + stockPriceRange,\n  };\n\n  const portfolioValue = portfolioNetValuePoint(\n    entryStockPrice,\n    mouseST.s,\n    mouseST.t,\n    portfolio,\n    r\n  );\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Icon edge=\"start\" className={classes.menuButton}>\n            <Link href=\"/\" underline=\"none\" className={classes.titleLink}>\n              <LooksIcon />\n            </Link>\n          </Icon>\n          <Link\n            href=\"/\"\n            underline=\"none\"\n            variant=\"h6\"\n            className={classes.titleLink}\n          >\n            Rainbow Options Calculator\n          </Link>\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <IconButton\n              aria-label=\"link to github\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              color=\"inherit\"\n            >\n              <Link\n                href=\"https://github.com/advait/rainbow-options\"\n                className={classes.titleLink}\n                target=\"_blank\"\n              >\n                <GitHubIcon />\n              </Link>\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <LeftDrawer\n        portfolio={portfolio}\n        setPortfolio={setPortfolio}\n        portfolioValue={portfolioValue}\n        r={r}\n        setR={setR}\n        timeWindow={timeWindow}\n        symbol={symbol}\n        setSymbol={setSymbol}\n        entryStockPrice={entryStockPrice}\n        setEntryStockPrice={setEntryStockPrice}\n        mouseST={mouseST}\n        setST={setMouseST}\n      />\n      <main className={classes.content}>\n        <Contours\n          portfolio={portfolio}\n          portfolioValue={portfolioValue}\n          r={r}\n          timeWindow={timeWindow}\n          stockPriceWindow={stockPriceWindow}\n          entryStockPrice={entryStockPrice}\n          setEntryStockPrice={setEntryStockPrice}\n          st={mouseST}\n          setST={setMouseST}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { wrapReact } from \"./graphql\";\n\nReactDOM.render(wrapReact(<App />), document.getElementById(\"root\"));\n"],"sourceRoot":""}